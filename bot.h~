//Hlavicka
#ifndef BOT_H__
#define BOT_H__


using namespace gloox;
using namespace std;

//namespace jabMin {
class Bot : public RosterListener, LogHandler, MessageHandler, ConnectionListener
{
	protected:
		string login;
		string pass;

	public:
		Bot();
		Bot(string login, string pass);
		~Bot();
		void run() const;

		virtual void onDisconnect( ConnectionError );
		virtual void onConnect();
		virtual bool onTLSConnect( const CertInfo& info );
		virtual void onResourceBindError( ResourceBindError );
		virtual void onSessionCreateError( SessionCreateError error );
		virtual void handleItemSubscribed( const JID& jid );
		virtual void handleItemAdded( const JID& jid );
		virtual void handleItemUnsubscribed( const JID& jid );
		virtual void handleItemRemoved ( const JID& jid );
		virtual void handleItemUpdated( const JID& jid );
		virtual void handleRoster( const Roster& roster );
		virtual void handleRosterError( const IQ& );
		virtual void handleRosterPresence( const RosterItem& item, const std::string& resource, Presence::PresenceType presence, const std::string& );
		virtual void handleSelfPresence( const RosterItem& item, const std::string& resources, Presence::PresenceType presence, const std::string& );
		virtual bool handleSubscriptionRequest( const JID& jid, const std::string& );
		virtual bool handleUnsubscriptionRequest( const JID& jid, const std::string& );
		virtual void handleNonrosterPresence( const Presence& presence );
		virtual void handleMessage( const Message& message, MessageSession * /*session=0*/ );
		virtual void handleLog( LogLevel level, LogArea area, const std::string& message );
}	

//}
#endif //BOT_H__
