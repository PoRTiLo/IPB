% zkontoroovat u vsech xepu datum vyroby:D
%=========================================================================

\linenumbers

\chapter{Úvod}

V souèasné dobì jsou øazeny k nejroz¹íøenìj¹ím psaným dorozumívacím prostøedkùm real--time komunikaèní sítì. Samozøejmì je tento jev k vidìní a¾ koncem minulého desetiletí. Psaná komunikace je ji¾ nìkolik století vyu¾ívána jako prostøedek k dorozumívání lidí mezi sebou. Za toto období pro¹la výrazným pokrokovým vývojem, proto u ni lze nalézt mnoho èasových mezníkù, které ji výraznì ovlivnily. Jako pøíklad jednoho z prvních komunikaèních kanálù lze uvést posly, kteøí èasto nesly zprávy na vzdálenosti nìkolika kilometrù. 
%Pro pøenos zpráv se také obvykle vyu¾ívalo ptactvo, pøedev¹ím holubi. 
Dal¹ím výrazným prvkem ve vývoji dorozumívacích prostøedkù bylo zavedení po¹ty a objevení telegrafu.

Pøíchodem internetu nastal v komunikaci zásadní zlom. Postupným roz¹íøením pokrytí a dostupnosti této technologie zaèalo vznikat mnoho nových komunikaèních prostøedkù. Pøíkladem mohou být elektronické zprávy, RSS zprávy nebo real--time komunikaèní sítì. Právì poslední zmínìná metoda za¾ívala v moderní dobì velký rùst v oblasti popularity, a» u¾ v podobì ICQ protokolu nebo dnes velmi roz¹íøené sociální síti Facebook. Jedna z hlavních výhod tìchto slu¾eb, napøíklad v porovnáním s klasickou po¹tou, je jejich rychlost doruèení. Naproti bì¾né elektronické po¹tì jsou u¾ivatele informováni o stavu pøíjemce zprávy. Real--time komunikaèní prostøedky nabízejí slu¾by, kterými je mo¾né zjistit zda se pøíjemce zprávy nachází u dorozumívacího zaøízení. Díky této schopnosti je u¾ivateli umo¾nìno zasílat zprávy a obratem na nì oèekávat odpovìdi.

S pøibývajícími elektronickými daty, na poli a» u¾ vìdních nebo praktických oborù, pøichází potøeba tyto informace uchovávat. K tìmto úèelùm slou¾í databáze, které se svou strukturou zamìøují pøedev¹ím na snadnou kontrolu dat, vyhledávání a jejich analyzování. S rostoucím obsahem se ale ulo¾ené informace stávají pouze daty bez významu. Proto vnikla nová disciplína nazvaná \textit{data mining}, která si klade za cíl znovunalezení \uv{ztracených} informací (na první pohled neviditelných) nebo nalezení informací úplnì nových.

Pøedmìtem této bakaláøské práce je seznámení se s problematikou komunikace probíhající pøes Jabber sí». Konkrétním cílem je vytvoøení jednoduchého Jabber klienta, který by byl schopen získávat statistická data. Nashromá¾dìná data jsou dále vyu¾ita pro pozdìj¹í analýzu a grafickou reprezentaci informací z nich získaných. Hlavním cílem této práce je získat neznámé informace z real--time komunikaèní sítì Jabber. 

Bakaláøská práce je tvoøena z ¹esti kapitol.
Kapitola \textbf{druhá} je tvoøena popisem protokolu XMPP, na kterém je postavena real--time komunikaèní slu¾ba Jabber. Je zde popsána architektura sítì a základní stavební kameny XMPP protokolu, které jsou vyu¾ívány sítí Jabber jako nástroj k zprostøedkování jednotlivých slu¾eb. V závìru tohoto oddílu je vìnována èást vybraným standardùm, které roz¹iøují základní XMPP protokoly. Jsou zde uvedena pouze ta roz¹íøení, která byla po konzultaci s vedoucím práce, oznaèena za relevantní k této práci.

Obsah \textbf{tøetí} kapitoly je zamìøen na popis procesu data mining. Zabývá se zaèlenìním této metody do komplexnìj¹ího procesu, který je nazýván získávání znalostí z databází. Dal¹í souèást této kapitoly se zabývá nezbytnými kroky transformace dat, která jsou získána z Jabber komunikace. Pøi tomto procesu jsou data pøevedena do vhodné podoby pro data minig. Následuje èást, kterou jsou popsány vybrané metody dolování dat a také je zde podrobnì rozebrán algoritmus \textit{k}--means. Tento algoritmus je vyu¾it pro samotné dolováni dat, které je zprostøedkováno aplikací RapidMiner. Popis tohoto programu a dal¹ích vybraných nástrojù uzavírá tøetí kapitolu.

Implementaèní èást této práce je popsána kapitolou \textbf{ètvrtou}. Je èlenìna na oddíly, které odpovídají vybraným èástem architektury této práce. Elementy architektury, které jsou popsány vlastní podkapitolou, jsou roz¹íøeny o zjednodu¹ený návrh struktury v podobì grafických schémat.

Kapitola \textbf{pátá} se zamý¹lí nad roz¹íøeními robota a nad dal¹ím pokraèováním této práce. Výsledky získané touto prací jsou prezentovány v kapitole \textbf{¹esté}. Je zde ukázán model pou¾ívaný programem RapidMiner pro dobývání znalostí. Konkrétnì jde o shlukování u¾ivatelù sítì Jabber do skupin podle èasu stráveném v samotné síti a jejich stavu. Výsledky jsou pøedstaveny pomocí rùzných grafických entit, a»  u¾ v podobì diagramu nebo grafu, který je transformovaný do dvourozmìrného prostoru.

Nemalý informativní obsah tvoøí i \textbf{pøílohy}. V první øadì to je slovník zkratek, shrnující slovní spojení z celého tohoto dokumentu. Následuje podrobnìj¹í popis základních entit stanzy a pøehled prùbìhu roz¹íøení. V dal¹í èásti je ukázán kompletní návrh databáze, který doplòuje základní popis ze ètvrté kapitole.


\chapter{XMPP}

V následující kapitole jsou, pro usnadnìní a jednodu¹¹í pochopení, rozebrány základní stavební kameny protokolu Extensible Messaging and Presence Protocol (XMPP). Konkrétnì jsou zde popsány stávající vlastnosti implementace, architektura protokolu XMPP obecnì \cite{Rfc3920, Rfc3921} a dal¹í detaily protokolu \cite{Adams, Saint, Moore}. 
Vzhledem k po¾adavkùm na dolování v datech popsaných v následující kapitole je kladen dùraz na vybraná roz¹íøení \cite{Xep0163,Xep0060}. Tato roz¹íøení tvoøí základ pro nìkteré roz¹íøené statusy, jako je napøíklad User Tune \cite{Xep0118}, User Mood \cite{Xep0107}, User Location \cite{Xep0080} a dal¹í. Dal¹í informace pou¾ité pro popis a pochopení XML jazyka byly èerpány z \cite{Kosek,Xml5th}.

Vznik samotného protokolu XMPP je datován do roku 2004 (bøezen), kdy na nìj byl pøejmenován Jabber. Pùvodní projekt Jabber byl vytvoøen roku 1998 autorem Jeremie Millerem, který ho zalo¾il za úèelem vytvoøit svobodnou otevøenou IM slu¾bu. Uvedený projekt mìl obsahovat tøi základní vlastnosti, do kterých se zahrnují jednoduchost a srozumitelnost pro implementaci, jednoduchost v oblasti ¹íøení a otevøenost podobì veøejnì dostupného popisu samotného protokolu. Základní vlastnosti a výhody klientù a serverù budou podrobnìji popsány ní¾e. Roku 1999, 4.ledna byl vytvoøen první server se jménem Jabber. Komunita vývojáøù se chopila iniciativy a vytvoøila klienty, kteøí dokázali se serverem komunikovat, pro rùzné platformy (Linux, Macintosh, Windows). Roku 2004 byl protokol XMPP pøidán mezi RFC\footnote{RFC request of comments -- ¾ádost o komentáøe} dokumenty. Základní norma popisující obecnou strukturu protokolu je RFC 3920 \cite{Rfc3920} a RFC 3921 \cite{Rfc3921}, který se zamìøuje na samotný instant messaging a zobrazení stavu. Dal¹í zdokumentovaná roz¹íøení jsou vydávána v podobì tzv. XEP (XMPP Extension Protocol) dokumentù, které jsou známé také pod star¹ím názvem JEP (Jabber Enhancement Proposal). Dne¹ní poèet tìchto norem se blí¾í k èíslu 300. Ka¾dý XEP obsahuje stav vývoje (schválení), ve kterém se zrovna nachází. 

Jako bezpeènostní prvky jsou zde podporovány SASL, TLS a GPG. XMPP protokol je postaven na obecném znaèkovacím jazyce XML, proto vlastnosti popsané dále v této kapitole platí i pro tento protokol.


\section{Architektura}
Dobøe navr¾ená internetová technologie je tvoøena správnì fungujícími komponenty, které mezi sebou doká¾í vytvoøit spojení a následnì zapoèít komunikaci. Pro popis Jabber architektury v této práci bylo èerpáno z \cite{Adams,Saint}. Tato struktura se nejvíce podobá struktuøe posílání e--mailù. Hlavní pøedností Jabber sítì je, tak jako u elektronické po¹ty, její decentralizace. V pøípadì Jabberu je decentralizace chápána jako mo¾nost provozovat vlastní server, na rozdíl od jiných komunikaèních systémù jako je napøíklad Facebook, kde existuje pouze jediný poskytovatel slu¾by. V pøípadì serveru je kladen dùraz na spolehlivost a roz¹iøitelnost a u klienta na u¾ivatele. Ka¾dý server pracuje samostatnì, co¾ znamená, ¾e chod ani výpadek jiné datové stanice ¾ádným zpùsobem jeho bìh neovlivní. V pøípadì výpadku jiného serveru bude nedostupný pouze seznam kontaktù a slu¾eb, které registrovaným u¾ivatelùm poskytoval. 

Obrázek \ref{pic4} znázoròující distribuovanou architekturu Jabberu byl pøevzat z \cite{Adams} a doplnìn o názvy jednotlivých komponent. Komunikace dvou Jabber klientù probíhá za úèasti jejich serverù a sítì, která je spojuje. Spojení mezi nimi bývá èasto ¹ifrováno.
\begin{figure}[ht]
\begin{center}
\input{struktura}
\caption{Distribuovaná architektura Jabber.}
 \label{pic4}
\end{center}
\end{figure}

Architektura Jabber serverù vyu¾ívá velké mno¾ství mezi--doménových pøipojení podobnì jako internetový systém elektronické po¹ty. Komunikace klienta z jedné domény s klientem z jiné na rozdíl od e--mailového modelu nevy¾aduje spolupráci tøetích stran. Klient se spojí s \uv{domácím} serverem, který pøímo navá¾e spojení se serverem po¾adováného klienta. Tyto vlastnosti jsou zárukou pro bezpeèný pøenos zpráv, znemo¾òující \uv{kráde¾e} JID\footnote{u¾ivatelské jméno}, který je popsán ní¾e, a spamování.


\subsubsection*{Jabber ID}\label{jid}
Jabber ID (JID) je jednoznaèný virtuální identifikátor u¾ivatele na síti. V pøípadì zalo¾ení úètu nejsou rozli¹ována velká a malá písmena, co¾ znamená, ¾e  Jabber není case--sensitive. Jednoznaèný Jabber identifikátor je slo¾en ze dvou èástí: \textit{Jabber bare} neboli èisté ID a \textit{resource} \cite{Rfc3920}. Základní èást na první pohled pøipomíná e--mailovou adresu \textit{user@server}. Druhá èást slou¾í k pøesné identifikaci jednotlivých spojení. Je pou¾ita ke smìrování sí»ového provozu s u¾ivateli v pøípadì otevøení vìt¹ího mno¾ství spojení pod jedním u¾ivatelem. Spoleènì Jabber bare a resource tvoøí tzv. \textit{full JID} --- \textit{user@server/resource} napøíklad \textit{jabInfo@jabbim.cz/bot}. Jednotlivé èásti u¾ivatelského jména popsané v tomto odstavci jsou ukázány v obrázku \ref{picJabinfo}.
\begin{figure}[ht]
\begin{center}
\input{jabinfo}
\caption{Rozebraná struktura Jabber ID.}
 \label{picJabinfo}
\end{center}
\end{figure}

Dal¹í vymo¾enost JabberID oproti e--mailové adrese je jeho mo¾nost pou¾ívat prakticky libovolné národní znaky u doménových jmen a u¾ivatelských úètù \cite{Saint}. Vyu¾íváním kódování UNICODE, se XMPP stává plnì mezinárodní a není jako jiné protokoly omezen rozsahem ASCII tabulky. Pøesto¾e je tato vymo¾enost k dispozici, doposud není ¾ádným výrazným zpùsobem vyu¾ívána.

\subsection*{Klient}
Klient je èasto jednoduchá aplikace pracující se vzdálenými slu¾bami, které jsou provozovány serverem. V této práci je zastoupen robotem s konzolovým rozhraním. XMPP svou architekturou nutí, aby byl co nejjednodu¹¹í. Vlastnosti, které by mìl mít, jsou shrnuty, podle \cite{Moore} do tøí bodù:
\begin{enumerate}
 \item komunikace s jedním Jabber serverem pomocí TCP soketu, který garantuje spolehlivé doruèení zpráv na rozdíl od UDP. Nad tímto transportním protokolem dále bì¾í kryptografický protokol TLS, který zabezpeèuje komunikaci klient--server a server--server.
 \item rozparsování a následná interpretace pøíchozí XML zprávy \uv{stanza} (kapitola \ref{Stanza})
 \item porozumìní sadì zpráv (\textit{message, iq, presence}) z Jabber jádra \cite{Rfc3920}
\end{enumerate}


\subsection*{Server}
Informace pou¾ité pro popis XMPP serveru byly èerpány z \cite{Moore}. K hlavním charakteristikám serveru oproti klientovi, jeho¾ základní vlastností byla jednoduchost, patøí stabilita a bezpeènost. Je pro nìj vyhrazen TCP port 5222. Komunikace mezi servery je realizována pøes port 5269. Ka¾dý server uchovává seznam zaregistrovaných u¾ivatelù, který nevykazuje ¾ádný jiný server. Zaregistrovaní u¾ivatelé v daném seznamu se mohou do sítì pøipojovat pouze pøes nìj. To zaji¹»uje nemo¾nost \uv{kráde¾e} úètu. Proto¾e XMPP komunikace probíhá pøes sí», musí mít ka¾dá entita adresu, v tomto pøípadì nazvána JabberID. XMPP spoléhá na DNS co¾ znamená, ¾e pou¾ívá jména na rozdíl od IP protokolu.

Server Jabber je systém spravující tok dat mezi jednotlivými komponentami, které spoleènì tvoøí Jabber slu¾by. Napøíklad \textit{Jabber Session Manager} (JSM) poskytne funkce pro IM komunikaci a práci se seznamem kontaktù. Komunikace mezi jednotlivými servery, jak je uvedeno na obrázku \ref{pic4}, je zprostøedkována za pomocí komponenty \textit{S2S} (server to server). Pøi pøipojení klienta k serveru je komunikace øízená pomocí \textit{C2S} (client to server). Jak ji¾ bylo øeèeno, Jabber sí» vyu¾ívá doménová jména místo ¹patnì zapamatovatelných IP adres. Pro tento zpùsob identifikace je urèena slu¾ba \textit{dnsrv}, která se stará o pøeklad názvù. V podstatì je to komponenta, která zaji¹»uje smìrování paketù na jiný server.

V tabulce \ref{tab4} jsou shrnuty informace o serverech Jabberu. První sloupec tvoøí jméno, následuje programovací jazyk, v nìm¾ je napsán. Vìt¹ina aplikací pro servery je vydávána pod licencí GPL\footnote{General Public License --- v¹eobecná veøejná licence GNU}. U v¹ech aplikací byla zkoumána nejaktuálnìj¹í verze. Její èíslo lze naleznout ve tøetím sloupci. V¹echny servery lze provozovat na operaèním systému Linux a Windows. Na platformì Mac OS mohou být pou¾ity v¹echny zde jmenované vyjma jabberd2. Pìt z ¹esti zde pøedstavených programù pro server Jabber jsou stále vyvíjeny, tedy kromì jabberd14. Hlavním úèelem tabulky je prezentovat dùle¾ité vlastnosti serverù v oblasti podpory roz¹íøených statusù. Jedná se o standardy \textit{pubsub}\footnote{Publish--Subscribe} (XEP--0060) \cite{Xep0060} a o jeho verzi zamìøenìj¹í více na u¾ivatele \textit{pep}\footnote{Personal Eventing Protocol} (XEP--0163) \cite{Xep0163}. Obì tato roz¹íøení tvoøí nezbytnou základnu pro \textit{roz¹íøené statusy} a proto je jejich podpora jak u serverù, tak klientù vy¾adována. Podrobnìji toto téma bude rozebráno v nìkteré následující podkapitole.


\begin{table}[h]
\begin{center}
\begin{tabular}{ l  c  c  c  c } 
\rowcolor[gray]{0.9}
\textbf{Server} & \textbf{Jazyk}  & \textbf{Verze} & \textbf{XEP--0060} 			& \textbf{XEP--0163}\\
ejabberd	& Erlang/ Top     & 2.1.6          & ANO					& ANO\\
Openfire	& java            & 3.6.4          & ANO					& ANO\\
jabbred2    	& c               & 2.2.11         & NE						& NE\\
jabbred14	& c, c++          & 1.6.1.1        & ANO					& NE\\
Prosody	    	& lua             & 0.7.0          & NE 					& ANO\\
Tigase		& java            & 5.0.0          & ANO					& ANO\\ \hline
\end{tabular}
\caption{Pøehled Jabber serverù.}
\label{tab4}
\end{center} 
\end{table}

Z vý¹e uvedené tabulky je zøejmé, ¾e aplikace pro servery, které jsou stále ve vývoji, podporují tzv. \textit{roz¹íøené statusy}. Tedy kromì programu jabbred2.

\section{XML}\label{Xml}
Jazyk XML (eXtensible Markup Language) \cite{Xml5th}, metajazyk pro deklaraci strukturovaných dat, je jádrem protokolu XMPP. Samotný jazyk vznikl roz¹íøením metajazyka SGML, je¾ slou¾í pro deklaraci rùzných typù dokumentù. Základní vlastností je jednoduchá definice vlastních znaèek (tagù). Dokument XML se skládá z elementù, které mù¾eme navzájem zanoøovat. Vyznaèujeme je pomocí znaèek --- poèáteèní a ukonèovací. Pomocí tohoto jazyka je tvoøena \textit{stanza} popsaná v následující kapitole.

Ukázka mo¾né struktury dokumentu psaného jazykem XML je zobrazena na pøíkladu \ref{picXML}. Standardnì je pøedpokládáno, ¾e je psán v kódování UTF--8 \cite{Kosek}, ale je--li jako v tomto pøípadì pou¾ito jiné, musí být konkrétní kódování uvedeno na jeho poèátku. V opaèném pøípadì nemusí být obsah správnì zobrazen. Na zaèátku dokumentu se také uvádí verze XML, ve které je dokument psán (1. øádek pøíkladu). Následuje koøenový element, který je uzavøen na samotném konci dokumentu. 4. øádek prezentuje mo¾nost pou¾ití prázdného elementu, který obsahuje jeden atribut s názvem zkratky fakulty. Velký význam zde mají úhlové závorky. Jsou jimi z obou stran obaleny v¹echny elementy. 

\begin{figure}[h]
\lstset{language=XML ,caption={Ukázka základního XML dokumentu.},label=picXML}
\begin{lstlisting}
            <?xml version="1.0" encoding="iso-8859-2"?>
            <fakulta>
              <název>Fakulta informaèních technologií</název>
              <zkratka fakulty="FIT"/>
              <typy studia>
                <bakaláøské titul="Bc."></bakaláøské>
                <magisterské></magisterské>
                <doktorské></doktorské>
              </typy studia>
            </fakulta>
\end{lstlisting}
\end{figure}

\section{Stanza}\label{Stanza}
Základní jednotkou pro komunikaci zalo¾enou na XML je stanza. Z jednodu¹¹ího pohledu je mo¾né se na ni dívat jako na jeden dlouhý XML soubor. Pøi zahájení komunikace se tento soubor \uv{otevøe}. Jeho samotné uzavøení probíhá a¾ pøi odhlá¹ení od sítì, neboli pøepnutí klienta do stavu offline. Stanzu je tedy mo¾né vnímat jako stream, který obsahuje v¹echna data probíhající komunikace. Mezi elementy pou¾ívané pro komunikaci klienta se serverem patøí tyto tøi: \textit{message}, \textit{presence} a \textit{iq}. Ka¾dý zde uvedený èlen má svùj jednoznaèný význam. V následujících odstavcích jsou jednotlivé èásti stanzy blí¾e definovány a na reprezentativních pøíkladech jsou ukázány jejich základní struktury a mo¾nosti vyu¾ití v praxi.

První prvek, který bude charakterizován je oznaèen anglickým výrazem \textit{message} (zpráva). Jak ji¾ název napovídá, slou¾í k posílání zpráv v¹eho druhu.
%\subsection*{Message}
Je to základní metoda pro rychlý pøenos informací z místa na místo. Zprávy jsou typu \uv{push}, co¾ znamená, ¾e jsou odeslány a není oèekávána ¾ádná aktivita od pøíjemce, která by pøijetí potvrdila. Jedno z dosavadních vyu¾ití se nachází v klasické komunikace po internetu, tzv. instant messaging (IM). K dal¹ím mo¾ným pou¾itím patøí skupinový chat a oznamovací nebo upozoròující zprávy. Ka¾dá z tìchto zpráv je tvoøena z minimální povinné struktury. Tak jako u klasické po¹tovní korespondence nesmí chybìt adresa odesílatele a adresa pøíjemce, kterému je zpráva adresována. Podle mo¾nosti pou¾ití jsou zprávy dìleny do kategorií. Jmenovitì toto rozdìlení implementuje atribut \textit{type}, který mù¾e nabývat jednu ze ètyø hodnot. Jsou rozli¹ovány zprávy pro komunikaci mezi dvìma entitami, skupinový chat, upozornìní, chybová zpráva a v neposlední øadì zpráva bez kontextu vy¾adující odpovìï pøíjemce. Nakonec nesmí být opomenut blok zprávy, pro u¾ivatele IM nejdùle¾itìj¹í, nesoucí vlastní obsah.
 
Základní pou¾ití struktury elementu \textit{message} je prezentováno na pøíkladu \ref{picMessage}. Na prvním øádku je uveden atribut, znaèící odesílatele. Druhý øádek obsahuje JID klienta, který zprávy pøijímá. Následuje informace o typu zprávy a poté je uveden element \textit{body} nesoucí samotný obsah.

\begin{figure}[h]
\lstset{language=Xml ,caption={Pou¾ití elementu \textit{message}.},label=picMessage}
\begin{lstlisting}
                  <message from="user@jabbim.com"
                           to="jabinfo@jabbim.com/bot"
                           type="chat"
                     <body> Kolik je hodin? </body>
                  </message>
\end{lstlisting}
\end{figure}

%\subsection*{IQ}
Dal¹í èástí stanzy je poskytována struktura  pro \textit{request--response} (¾ádost--odpovìï) vazbu, podobnou metodám GET, POST a PUT z protokolu HTTP \cite{Saint}. Zkrácenì je oznaèována pomocí dvou poèáteèních písmen \textit{Info/Query} neboli IQ. Na rozdíl od elementu \textit{message} tvoøí \textit{iq} spolehlivìj¹í pøenos, optimalizovaný pro výmìnu dat (binární data). K dal¹ím rozdílùm patøí povinnost pøíjemce odpovìdìt na ka¾dou pøijatou zprávu, neboli potvrdit její doruèení. Skuteènost, ¾e je na právì po¾adovanou zprávu odpovìzeno, zaji¹»uje parametr \textit{id}. Iq dotaz nebo odpovìï musí obsahovat stejnou hodnotu tohoto atributu jako zpráva vytvoøená ¾ádajícím subjektem. Dal¹í povinný atribut rozdìluje iq na ètyøi typy. Jednotlivé ¾ádosti na proces nebo akci jsou posílány samostatnì \cite{Rfc3921}. V pøíloze \ref{Estanza} je uvedena rozsáhlej¹í struktura tohoto elementu. Pou¾ití nachází v pøípadech, které nastavují, ¾ádají nebo informace posílají. Tato struktura je vyu¾ívána pro novou registraci, posílání seznamu kontaktù a dal¹í.

Pøíklad \ref{picIq} znázoròuje základní pou¾ití elementu \textit{iq}. U¾ivatel \textit{user} posílá dotaz na získání seznamu kontaktu (øádek 5.).

\begin{figure}[h]
\lstset{language=Xml ,caption={Pou¾ití elementu \textit{iq}.},label=picIq}
\begin{lstlisting}
                  <iq from="user@jabbim.com/doma"
                      to="user@jabbim.com"
                      id="uhhfw23648"
                      type="get"
                     <query xmlns="jabber:iq:roster"/>
                  </iq>
\end{lstlisting}
\end{figure}

 

%\subsection*{Presence}

Poslední a pro tuto práci nejdùle¾itìj¹í prvek stanzy je \textit{presence}. V pøípadì, ¾e nemá urèeného pøíjemce, tak funguje zpùsobem jako broadcast. Co¾ znamená, ¾e jsou informace smìrovány v¹em klientùm, kteøí jsou zaregistrování k jejímu odbìru. Presence v èeském pøekladu informace o stavu (pøítomnost) rozesílá dostupnost ostatních entit v síti. Jedná se tedy o nastavení u¾ivatelské dostupnosti tak jako na jiných real--time komunikaèních a sociálních systémù.

Existuje nìkolik základních stavù statusù, které reprezentují aktuální dosa¾itelnost u¾ivatele. Tento jev je vyjádøen pomocí elementu \textit{show}, který disponuje ètyømi mo¾nostmi. První oznamuje, ¾e je u¾ivatel k dispozici a schopen aktivní komunikace. Druhá èasto se vyskytující mo¾nost naznaèuje, ¾e je subjekt krátkou dobu pryè od svého IM klienta. Tento a dal¹í dva stavy, popsané dále, jsou èasto zmìnìny bez lidského zásahu (pomocí pc nebo jiného zaøízení) prostøednictvím funkce známé jako \uv{auto--away}. Poslední dva stavy charakterizují del¹í èasové období neèinnosti. Tato oznámení o zmìnì stavu u¾ivatele jsou èasto zasílána pouze kontaktùm, které se nacházejí v re¾imu online. Tato optimalizace pøispívá ke sní¾ení sí»ového provozu, jeliko¾ presence v reálném èase pøi komunikaci vyu¾ívá velké mno¾ství ¹íøky pásma.

Základní pou¾ití \textit{presence} je zobrazeno v pøíkladu \ref{picPresence}. Kontakt \textit{jabinfo@jabbim.com/bot} (1. øádek) posílá informace o svém stavu (øádek è. 2) a svùj status (è. 3).
\begin{figure}[h]
\lstset{language=Xml ,caption={Pou¾ití elementu \textit{presence}.},label=picPresence}
\begin{lstlisting}
                  <presence from="jabinfo@jabbim.com/bot"
                     <show> online </show>
                     <status> Jsme zde. </status>
                  </presence>
\end{lstlisting}
\end{figure}

Obsáhlej¹í struktura elementu \textit{presence} je zobrazena v pøíloze \ref{Estanza}, kde je rovnì¾ k nalezení pøehled v¹ech mo¾ných stavù.

Jak ji¾ bylo zmínìno v èásti o Jabber ID, Jabber podporuje práci s více souèasnì pøipojenými klienty k jednomu Jabber úètu. Vysvìtlení funkènosti bude prezentováno na pøíkladu u¾ivatele pøihlá¹eného na stolním poèítaèi a z klienta v mobilním telefonu. U obou tìchto pøipojení je pou¾it stejný Jabber bare, ale odli¹ného resource, napøíklad \textit{domov} a \textit{mobile}. Právì tento rozdíl v tzv. \uv{full} adrese úètu zaji¹»uje jednu ze dvou mo¾ných podmínek pro správnou adresaci zpráv. Druhá mo¾nost, která bude uplatnìna pøi pou¾ití adresy úèty pouze ve formì Jabber bare, je nastavení priority u jednotlivých programù. Priorita je èíslo v rozsahu hodnot od -128 do 127, kde klient s vìt¹í prioritou má pøednost pøed klientem s ni¾¹í. Nastane--li pøípad pøipojení více klientù se stejnou prioritou, ka¾dý server se pøi rozesílání zpráv zachová podle vlastní implementace. Nìkteré roze¹lou zprávy v¹em klientùm, jiné naopak jen poslednímu pøihlá¹enému.

\section{Roz¹íøení}\label{Rozsireni}
Dále se tato práce zabývá roz¹íøeními protokolu XMPP o dal¹í vlastnosti, k jejich¾ popisu slou¾í XEP. Pro tuto práci jsou nepostradatelné \uv{statusy}, pro které tvoøí základ standardy XEP--0060 \cite{Xep0060} a XEP--0163 \cite{Xep0163} zkrácenì PEP\footnote{Personal Eventing via Pubsub}. Obì tato roz¹íøení umo¾òují strukturovanì pracovat, pou¾ívat a pøená¹et dal¹í XEP protokoly. Jako pøíklady relevantní k práci jsou zde uvedeny protokoly \textit{User Location} (kde se u¾ivatel právì nachází) \cite{Xep0080}, User Tune (co u¾ivatel poslouchá za hudbu) \cite{Xep0118}, User Mood (aktuální nálada u¾ivatele) \cite{Xep0107} a User Activity (co u¾ivatel právì dìlá) \cite{Xep0108}. Jsou to tedy protokoly zalo¾ené na PEP, které vy¾adují podporu nejen v klientech, ale i na stranì serveru (zobrazuje tabulka \ref{tab4}). S touto informací úzce souvisí dal¹í protokol XEP--0115 \cite{Xep0115}, který umo¾òuje zjistit podporované schopnosti klienta, pøípadnì, které informace je ochoten pøijímat. Tato vlastnost bude popsána ní¾e v èásti zabývající se podporovanými vlastnostmi.

V¹echna tato roz¹íøení by mohla být pøidána pøímo do statusu viz pøíklad \ref{picPresence}, av¹ak ten je primárnì urèen k informování o pøítomnosti na IM síti. Hlavní rozdíl mezi PEP a obyèejným posílání stavu pomocí presence je v pravomoci klienta pøijmout nebo odmítnou informaci, na rozdíl od presence, je¾ je pøijata v¾dy.

Základ pøenosu informací zaèíná na stranì klienta, který chce v¹echny ve svém roster listu (seznam kontaktù), informovat o statusu. Za¹le zprávu obalenou v elementu \textit{iq} serveru. Ukázka této zprávy je prezentována na pøíkladu \ref{picPep}, který znázoròuje zaslání informace o druhu hudby, kterou v danou chvíli u¾ivatel poslouchá. Vyu¾ívá k tomu roz¹íøení User Tune, definovaném na øádku èíslo 5. Základ zprávy oznamující zaèátek vysílání informací o roz¹íøených statusech je v¾dy stejný. Li¹í se pouze øádkem 3. a obsahem elementu item v pøíkladu \ref{picPep}.

\begin{figure}[h]
\lstset{language=Xml ,caption={Zaèátku vysílání roz¹íøeného statusu.},label=picPep}
\begin{lstlisting}
       <iq from='user@jabbim.com' type='set' id='pub1'>
          <pubsub xmlns='http://jabber.org/protocol/pubsub'>
             <publish node='http://jabber.org/protocol/tune'>
                <item>
                   <tune xmlns='http://jabber.org/protocol/tune'>
                      <artist>Daniel Landa</artist>
                      <length>255</length>
             ...
\end{lstlisting}
\end{figure}

V pøípadì úspì¹ného pøijetí \textit{iq} zprávy serverem, ka¾dý, kdo se zaregistroval k odebírání roz¹íøených statusù, obdr¾í oznámení ve formì \textit{message}. Oznámení bude také doruèeno v¹em resources. Celá zpráva i v¹echny dal¹í nále¾itosti jsou uvedeny v pøíloze \ref{Erozsireni}.

\subsubsection*{Podporované vlastnosti}
Jednotlivá roz¹íøení protokolu XMPP jsou nepovinná, a proto nemusí být ve v¹ech klientských aplikacích podporována. Pro zji¹tìní podporovaných roz¹íøení se pou¾ívá XEP--0115 Entity Capabilities \cite{Xep0115}. Toto roz¹íøení výraznì sni¾uje poèet a velikost komunikací a pøenosù zpráv mezi u¾ivateli. Dotazem zobrazeným na pøíkladu \ref{picCap} je zji¹tìna schopnost jednotlivých klientù, kterou následnì server vyu¾ije pro správné smìrování roz¹íøených statusù. V¹echny zde zmiòované roz¹íøení a protokoly z této kapitoly je mo¾né u ka¾dého klienta (seznam klientù obsahuje tabulka v pøíloze \ref{Erozsireni}) vyèíst z atributu \textit{ver} (druhá èást u atributu node), který je vypoèítán ze v¹ech podporovaných protokolù klienta, viz \cite{Xep0115}.

\begin{figure}[h]
\lstset{language=XML ,caption={Dotaz na podporované protokoly.},label=picCap}
\begin{lstlisting}
  <iq from="user@jabbim.com" id="disco1"
      to="jabinfo@jabbim.com/bot" type="get">
     <query xmlns="http://jabber.org/protocol/disco#info"
        node="http://code.google.com/p/exodus#QgayPKawpkPSDYmwT/WM94uAlu0="/>
  </iq>
\end{lstlisting}
\end{figure}

\subsubsection*{Dal¹í roz¹íøení}
V následujících nìkolika odstavcích budou pøiblí¾eny specifikace jednotlivých roz¹íøení XEP, které slou¾í jako zdrojová data pro dolování a jsou relevantní k tématu práce.

Prvním roz¹íøením, nad rámec základních vlastností Jabberu, které zde bude podrobnìji rozebráno, je elektronická verze klasické vizitky neboli \textit{VCard}. Jeho specifikací se zabývají dva standardy. Jeliko¾ novìj¹í verze XEP dokumentu \cite{Xep0292} se v dobì psaní této práce nacházela ve stavu \uv{experimental}, co¾ znamená, ¾e je¹tì není schválena jako standard, je pouze ve stavu návrhu. Proto bylo pou¾ito verze star¹í \cite{Xep0054}. Jednodu¹e øeèeno je VCard struktura, která nese informace o u¾ivateli jako je jméno, pøíjmení, e--mail, adresa bydli¹tì i zamìstnání a dal¹í údaje. Data jsou dále zveøejòována na sítí, z èeho¾ vyplývá, ¾e jsou dostupná ostatním u¾ivatelùm. Vyplnìní tìchto osobních údajù je dobrovolné a tak se u nìkterých u¾ivatelù nachází pouze pøezdívka a JID, které jsou èasto pøeddefinovány automaticky. Nedílnou souèástí v¹ech sociálních a komunikaèních systému jsou malé fotografie, loga nebo ikony, kterými se u¾ivatelé prezentují. V síti Jabber tomu není jinak, a proto je samotný obrázek zahrnut pøímo do VCard v polo¾ce \textit{photo}. Podrobnìj¹í informace o jeho nastavení a pøijímání je mo¾né nalézt v \textit{vCard--Based Avatars} \cite{Xep0153}, který jej definuje.

Díky základní podmínce XMPP protokolu (otevøenost) existuje mnoho rùzných aplikací, pomocí kterých lze v síti Jabber komunikovat. S programy, pou¾ívanými u¾ivateli, úzce souvisí dal¹í zde implementované roz¹íøení. Jedná se o realizaci \textit{Software Version} dokumentu \cite{Xep0092}, který se právì zabývá získáváním informací o samotných aplikacích. Je--li toto roz¹íøení podporováno je díky nìmu mo¾né zjistit jméno a verzi pou¾ívané aplikace. Informace o operaèním systému èasto nejsou kvùli bezpeènosti ani vyplnìny. Podrobnìj¹í informace o softwarové výbavì klienta je mo¾né zjistit pomocí XEP \cite{Xep0115}, o kterém ji¾ bylo  døíve psáno v odstavci zabývajícím se podporovanými vlastnostmi klientských aplikací.

S roz¹íøením tzv. \uv{chytrých} mobilních zaøízení mezi ¹ir¹í veøejnost vzniklo nìkolik nových disciplín spojených s urèováním zemìpisné polohy, jako je napøíklad geocaching. 
Geografická poloha je pøená¹ena ve formì souøadnic popisující pøímo zemìpisnou ¹íøku a délku. Souèasnì lze informaci o poloze pøená¹et i slovnì ve formì adresy. Pøíkladem slovního popisu je ulice, èíslo popisné, mìsto a dal¹í. Mnoho aplikací, které mají k dispozici GPS pøijímaè, vysílají a aktualizují zemìpisné informace automaticky, napøíklad po urèité dobì nebo zmìnì polohy o urèitou vzdálenost. Toto a dal¹í ní¾e popsané roz¹íøení jsou postaveny na ji¾ zmiòovaném PEP. Nìkteré èásti protokolù jsou zjednodu¹eny a pøipraveny tím pro \uv{mobilní instant messaging}.

Pro sdìlení informací o stavu klienta není v základní verzi Jabberu mnoho. Pomocí presence je mo¾né \uv{pouze} prozradit, zda je u¾ivatel pøipraven komunikovat nebo je momentálnì nedostupný a to v nìkolika verzích li¹ících se délkou nepøítomnosti. Pokroèilej¹í nastavení statusu nabízí \textit{User Mood} \cite{Xep0107} a to ve formì sdìlení souèasné nálady, jako je napøíklad radost. Dal¹í mo¾né upøesnìní èinnosti u¾ivatele jsou definovány v \textit{User Activity} \cite{Xep0108}, kde ka¾dá èinnost je slo¾ena z povinné obecné kategorie a nepovinné, která informaci upøesòuje. Pøíkladem mù¾e být \textit{eating} a \textit{having\_a\_snack} tj. u¾ivatel jí, u¾ivatel svaèí.

K poslednímu roz¹íøení implementovanému v této práci patøí \textit{User Tune} \cite{Xep0118}, které umo¾òuje u¾ivateli ¹íøit informace o aktuálnì poslouchané hudbì. Nìkteré dne¹ních hudební pøehrávaèe doká¾í automaticky spolupracovat s IM klientem a pøedávat informace o hudbì bez nutného lidského zásahu. Ve zprávì jsou tedy pøená¹eny informace o skladbì, interpretovi, albu a dal¹í informace, které mohou být získávány z MP3 ID3v1 nebo novìj¹í ID3v2 tag.

Podpora roz¹íøení v aplikacích je ukázána v tabulce v pøíloze \ref{Eklient}. Z této tabulky vyplývá, ¾e roz¹íøenost aplikací podporující vý¹e popsaná roz¹íøení je pomìrnì malá.
Napøíklad v pøedcházející zmiòované èásti o poslouchané hudbì, pøi stavu, kdy program toto roz¹íøení nepodporuje, je posíláno pomocí normální presence. Jméno skladatele, alba a dal¹í podrobnosti jsou shrnuty do statusu, tudí¾ jsou doruèeny v¹em u¾ivatelùm ze seznamu kontaktù.






\chapter{Data mining}

Tøetí kapitola se zabývá procesem dobývání znalostí z databází. Popisuje jej jako disciplínu, která vznikla za úèelem vytì¾ení informací z dat, která jsou v nepøeberném mno¾ství ukládána v databázích. Díky velikosti dne¹ních diskù, objem ukládaných dat neustále roste. S tím také úzce souvisí zvìt¹ující se pomìr nepotøebných a za¹umìlých dat vùèi u¾iteèným informacím. V této kapitole jsou mimo jiné popsány metody pou¾ívané k dolování z dat, které jsou relevantní k této práci.
%Jak kdysi øekl øekl anglický filozof Bacon: \uv{ve znalostech je síla}%Anglický filozof Bacon kdysi øekl, ¾e ve znalostech je síla (Knowledge itself is a power.

Na zaèátku kapitoly je rozebrán pojem získávání znalostí databází, jeho¾ jednu podstatnou èást tvoøí samotný data ming. Dále je vysvìtlena základní terminologie, pro kterou bylo èerpáno z \cite{IIS}. 
Cílem první podkapitoly je pøiblí¾ení zpùsobu, jakým byla data ulo¾ená v databázi, pøipravena k samotnému data miningu.
Celá druhá podkapitola je vìnována vybraným metodám pro dolování dat a vlastnostem, které je od sebe navzájem odli¹ují. Jsou zde rozebrány \textit{asociaèní pravidla}, pro jejich¾ popis bylo èerpáno z \cite{Berka}. Pro ostatní metody, které jsou popsány dále, byla jako zdroj informací pou¾ita kniha \cite{Han}. Poté následuje tøetí podkapitola, která se podrobnìji zabývá jednou z metod pro dolování dat a to \textit{shlukováním}. Obsahem této èásti jsou ji¾ konkrétní algoritmy pro shlukování dat \cite{Rezankova,Bramer} a také metoda \textit{k--Means} vyu¾ívaná v praktické èásti této práce. Kapitolu uzavírá struèný pøehled vybraných programù pro data minig a podrobnìj¹í seznámení s nástrojem \textit{RapidMiner}, který je v této práci vyu¾íván pro samotné dolování.


\subsection*{Terminologie}
Pojem data mining neboli èesky dolování dat se zaèal ve vìdeckých kruzích objevovat poèátkem 90. let 20. století. První zmínka pochází z konferencí vìnovaných umìlé inteligenci (IJCAI'89\footnote{International Joint Conference on Artificial Intelligence}--mezinárodní konference konaná v Detroitu, AAAI'91\footnote{Association for the Advancement of Artificial Intelligence} a AAAI'93--americké konference v Californii a Washingtonu, D.C) \cite{Berka}. 

Tradièní metoda získání informací z dat je realizována jejich manuální analýzou a interpretací. V praxi ji napøíklad nalezneme v odvìtví zdravotnictví, vìdy, marketingu (efektivita reklamních kampaní, segmentace zákazníkù) a dal¹ích. Pro tyto a mnoho dal¹ích disciplín je manuální zpracování pøíli¹ pomalé, drahé a vysoce subjektivní. Dal¹í dùvod k pøechodu na jiné metody je objemnost dat, která dramaticky vzrostla a tudí¾ se manuální analýza stává zcela nepraktická. Databáze rychle rostou ve dvou následujících kategoriích:
\begin{enumerate}
   \item poèet záznamù neboli objektù v databázi
   \item poèet polí neboli atributù objektù v databázi
\end{enumerate}

Proces data mining je pouze jedna èást z odvìtví nazývané dobývání znalostí z databází neboli KDD\footnote{Knowledge Discovery in Database} definované ní¾e v definici \ref{KDD}. Vznik disciplíny KDD je dùsledkem nepøeberného mno¾ství automaticky sbíraných dat, která je potøeba dále vyu¾ívat. Podstatným znakem celého procesu je správnost reprezentace výsledkù formou, která má k u¾ivateli nejblí¾e. Jako pøíklad bude uvedena implikace ve tvaru rozhodovacích pravidel, asociaèní pravidla, rozhodovací stromy, shluky podobných dat a dal¹í. Základem KDD je praktická pou¾itelnost metod. Oèekává se zji¹tìní nových skuteèností namísto prezentování ji¾ známých informací.

\newtheorem{definice}{Definice}[section]
\begin{definice}\label{KDD}
  \textnormal {
KDD je chápáno jako interaktivní a iterativní proces tvoøený kroky selekce, pøedzpracováním, transformace, vlastního \uv{dolování} (data--mining viz \ref{Data Mining}) a interpretace \cite{Berka}.
}
\end{definice}

Grafické znázornìní definice \ref{KDD} je popsáno schématem na obrázku \ref{picFayyad}, který prezentuje èasový harmonogram v KDD. Schéma znázoròuje následnost jednotlivých procesù, které tvoøí KDD. KDD je iterativní proces, z èeho¾ vyplývá, ¾e skuteènosti nalezené v pøede¹lých èástí zjednodu¹í a zpøesní vstupy pro následující fáze. Jakmile jsou znalosti získány, jsou prezentovány u¾ivateli. Pro pøesnost mù¾e být èást procesu KDD je¹tì upravena. Tím budou získány \uv{pøesnìj¹í a vhodnìj¹í} výsledky.

\begin{figure}[ht]
\begin{center}
\input{datamining}
\caption{Proces dobývání znalostí z databází podle knihy autora Fayyad \cite{Fayyad}.}
 \label{picFayyad}
\end{center}
\end{figure}

Vzhledem k obrázku \ref{picFayyad}, který prezentuje jednotlivé kroky získávání znalostí z databází budou dále tyto procesy popsány. Prvním èást v KDD je tvoøena výchozími daty, které slou¾í jako zdroj pro ostatní fáze. Samotný popis získávání tìchto dat je popsán v pøedcházející kapitole. Procesu selekce dat, je kladen za cíl, vybrat co mo¾ná \uv{neju¾iteènìj¹í} mno¾inu dat a tím i zmen¹it její celkový objem. V této èásti získávání znalostí se pøi vybírání dat bere ohled na to, jak se jednotlivá data vztahují ke konkrétnímu u¾ivateli. Následující proces nazvaný transformace se zabývá pøevedením dat do vhodného formátu pro samotné dolování informací. Tato èást je popsána v následují podkapitole, kde hlavní úlohu pøi transformaci je èas. Vybrané metody pro dolování dat jako je napøíklad shlukování a dal¹í, jsou takté¾ v této práci popsány ní¾e.

Získávání znalostí z databází je proces slo¾en z nìkolika krokù vedoucích od surových dat k formì nových poznatkù. Iterativní proces je slo¾en, tak jak je prezentováno v \cite{Han}, z následujících krokù:

\begin{itemize}
   \item {
    \begin{description}
      \item[èi¹tìní dat] -- fáze, ve které jsou nepodstatné údaje odstranìny z kolekce.
    \end{description}
   }
   \item {
    \begin{description}
      \item[integrace dat] -- kombinování heterogenních dat z nìkolika zdrojù do spoleèného jediného zdroje.
    \end{description}
   }
   \item {
    \begin{description}
      \item[výbìr dat] -- rozhodování o relevantních datech.
    \end{description}
   }
   \item {
    \begin{description}
      \item[transformace dat] -- také známý jako konsolidace dat. Fáze, ve které jsou vybraná data transformována do formy vhodné pro dolování.
    \end{description}
   }
   \item {
    \begin{description}
      \item[data mining] --  zásadní krok, ve kterém jsou aplikovány vzory na data.
    \end{description}
   }
   \item {
    \begin{description}
      \item[hodnocení modelù] -- vzory dat zastupují získané znalosti.
    \end{description}
   }
   \item {
    \begin{description}
      \item[prezentace znalostí] -- koneèná fáze, zji¹tìné poznatky jsou reprezentovány u¾ivateli. Tento základní krok vyu¾ívá vizualizaèní techniky, které pomáhají u¾ivatelùm porozumìt a správnì interpretovat získané výsledky.
    \end{description}
   }
\end{itemize}

Jak je uvedeno v \cite{Han}, bì¾nì jsou nìkteré z tìchto krokù kombinovány dohromady. Kroky èi¹tìní dat a integrace dat mohou být provedeny spoleènì, tak jako to prezentuje schéma na obrázku \ref{picFayyad}.

%\subsection*{Základní pojmy}
V této podsekci jsou ve struènosti vysvìtleny základní nejdùle¾itìj¹í pojmy dále v práci vyu¾ívané.

Definic výrazu data mining se v odborné literatuøe nachází nìkolik. Zde uvedená je kombinací dvou \uv{definic} z \cite{DM}. %\textbf{Za pøedchùdce tohoto oboru se pova¾uje vìdní obor statistika, ze které se postupem èasu vyèlenil.}

\begin{definice}\label{Data Mining}
  \textnormal {
Data Mining je proces objevování znalostí, který pou¾ívá rùzné analytické nástroje slou¾ící k odhalení døíve neznámých vztahù a informací z velmi rozsáhlých databází. Výsledkem je predikèní model, který je podkladem pro rozhodování \cite{DM}.
}
\end{definice}

Mezi dal¹í èetnì se vyskytující pojmy v tomto odvìtví patøí napøíklad data, znalosti a informace. Tyto termíny jsou èasto mezi sebou zamìòovány, proto jsou ní¾e jejich významy striktnì definovány tak jako v \cite{IIS}.

Jedna z nìkolika existujících definic pojmu data je uvedena v definici \ref{Data}, která je popisuje z pohledu informaèního. Data èasto nemají sémantiku (význam) a bývají zpracována èistì formálnì.

\begin{definice}\label{Data}
  \textnormal {
Data jsou z hlediska poèítaèového pouze hodnoty rùzných datových typù.
}
\end{definice}

Informace lze chápat jako data, která byla obohacena o sémantiku (význam), jsou tedy ji¾ zpracovaná a interpretována u¾ivatelem. Znalosti, jsou øazeny do stejné kategorie jako informace, ale jejich interpretace bývá je¹tì slo¾itìj¹í. Èasto bývají tvoøeny shluky informací, proto jsou reprezentovány jako odvozené informace. Podle studijní opory \cite{IIS} jsou znalosti informace, které jsou zaøazeny do souvislostí.



\section{Transformace dat}\label{TransformaceDat}
Transformace dat tvoøí tøetí èást z celkového procesu dobývání znalostí z databází. Ne¾ se data dostala do tohoto stavu, bylo na nich provedeno nìkolik krokù, ve kterých byla upravována. V první fázi byla sbírána Jabber komunikace, která je popsána v první kapitole. Druhá fáze byla zamìøena na zú¾ení výsledné mno¾iny, a proto byla vybrána jen relevantní data. I pøes tyto kroky relaèní databáze obsahuje velké mno¾ství dat, která se nenachází ve stavu, aby mohla být pou¾ita jako zdroj pro data minig. Jak bude popsáno v následující podkapitole vìt¹ina metod pro dolování dat pracuje pouze s daty, která obsahují kvantitativní promìnné. Za tímto úèelem je potøeba v¹echny atributy tabulky z databáze, které mají být nadále pou¾ívány, pøevést na mìøitelné hodnoty.  

V této práci se bude pracovat s atributy nesoucí informace o jak aktuálních tak minulých stavech u¾ivatelù, kteøí si pøidali úèet \textit{jabInfo@jabbim.com} do svého seznamu kontaktù. A tak byla jejich ka¾dá zmìna statusu ulo¾ena do databáze. Z dùvodu neèíselného hodnoty stavù, jako je napøíklad available, away a dal¹í, je tøeba provést jejich transformaci na kvantitativní hodnoty. Proces byl proveden pomocí bijektivního zobrazení. Kde zobrazení je, podle \cite{IIS}, funkce s definièním oborem $S$ a oborem hodnot $T$, která je nazývána binární relace $f \subseteq S \times T$. V této relaci se nevyskytují dvì rùzné dvojice ($s$,$t_1$) a ($s$,$t_2$), kde $s \in S$ a $t_1$, $t_2 \in T$. Prvky $t_1$ a $t_2$ jsou rùzné. Z toho vyplývá, ¾e ka¾dému prvku $s$ z mno¾iny $S$ je pøiøazen jednoznaènì právì jeden prvek $t \in T$. Tuto definici je mo¾né zapsat ve tvaru:
$$f: S \rightarrow T,$$ kde $S$ a $T$ jsou mno¾iny ($D_f$, $H_f$).

Konkrétní pøípad transformace z této práce tedy bude obsahovat mno¾inu $S$, kde $$ S = \{Available, Chat, Away, DND, XA, Unavaliable\} $$ a mno¾ina $T$, kde $$T = \{120,110,90,70,50,0\},$$ do které budou jednotlivé prvky z mno¾iny $S$ bijektivnì zobrazeny. Kdy bijekce je zobrazení, které ka¾dému prvku z cílové mno¾iny, konkrétnì z mno¾iny $T$, pøiøazuje právì jeden prvek z mno¾iny poèáteèní, tedy $S$.

Pøi výbìru velikosti hodnoty, pro výslednou mno¾inu $T$, bylo èerpáno z programu Gajim, který je multiplatformní klient s velkou podporou standardù a roz¹iøujících protokolù.Hodnoty v mno¾inì $T$ byly zvoleny tak, aby mìly sestupné uspoøádání, a aby bylo mo¾né je dobøe mezi sebou porovnávat. Jsou--li vybrány dvì hodnoty napøíklad available a unavailable, vzdálenost mezi nimi musí být vìt¹í ne¾ vzdálenost napøíklad u hodnot chat a away. Na druhou stranu prvky ze vstupní mno¾iny $S$ jsou striktnì definovány podle Jabber standardu, který je popsán v RFC \cite{Rfc3920}.


\subsection*{Temporální data}
Druhá podstatná transformace, pro kterou bylo èerpáno z \cite{Temporal}, se tak jako první nezabývá transformováním dat textových na data, jejich¾ obsah by byl tvoøen kvantitativními promìnnými. V této èásti jsou øídká temporální data transformována na hustá. Pro následné vyhodnocení a data mining je potøeba øádkùm z tabulky presence pøidat koneèné èasové razítko, které by vymezilo interval doby platnosti tìchto dat.

Jak ji¾ bylo uvedeno, hlavním rozdílem mezi temporálními databázemi a ostatními je schopnost uchovávat èasové údaje. Své uplatnìní nachází v odvìtvích, kde je potøeba zpracovávat stará a zároveò nová data, napøíklad v oblastech medicíny, finanènictví, monitorování a dal¹ích. Jednotlivé záznamy, které jsou závislé na èase, jsou v databázích ukládány jako samotné body, tedy diskrétnì. Pøesto¾e v reálném svìtì je vìt¹ina tìchto údajù z pohledu èasu spojitých.

K dal¹ímu popisu temporálních databází nyní budou charakterizovány tøi dùle¾ité pojmy, pomocí nich¾ jsou databáze dále dìleny. Prvním pojmem je \textit{granualita}, která udává nejmen¹í èasovou jednotku, kterou databáze rozli¹ují. Hodnoty, které mù¾e nabývat, jsou hodina, den, rok a dal¹í. Velikost granuality ovlivòuje velikost objemu dat, který je pøímo úmìrný s pøesností záznamù. Dal¹ím pojmem je \textit{èas platnosti}, která reprezentuje období, kdy je daný fakt v modelovém svìtì pravdivý. Posledním termínem je \textit{èas transakce}, která definuje pøítomnost faktu v databázi a mo¾nost jej získat. Èas transakce a èas platnosti jsou na sobì nezávislé a definují dvì rozdílné èasové osy, kdy ka¾dá mù¾e disponovat s jinou granualitou. Souhrnný název pro vý¹e uvedené tøi pojmy, který se pou¾ívá, je systém èasových razítek. Pøi pou¾ití tìchto systému lze následnì tvoøit dotazy zamìøené na rùzná èasová období, jako je minulost, pøítomnost a budoucnost. Tyto dotazy jsou velmi jednoduché a to díky roz¹íøenému jazyku TSQL, který vychází z klasické podoby dotazovacího jazyka SQL.

Temporální databáze jsou rozdìleny, podle systému èasových razítek, na tyto základní: \textit{snímková}, \textit{transakèní}, \textit{platného èasu}, \textit{obojího èasu} (bitemporální). Entity z databáze, která je pou¾ita v této práci, je mo¾né zaøadit do kategorie \textit{snímkových tabulek} (snapshot). K jejím hlavním rysùm patøí zaznamenávání stavu dat v jistém okam¾iku. Èas transakce ani èas platnosti zde nejsou uplatnìny.

Konkrétní pøíklad mo¾né transformace je ukázán na èásti tabulky \textit{presence} \ref{tabPresence}, která se ve stejném formátu nachází i v databázi, a modifikované tabulce \textit{presecence\_modify} \ref{tabPresenceModify}.
\begin{table}[ht]
\begin{center}
\begin{tabular}{ c  c  c  c  c } 
\rowcolor[gray]{0.9}
\textbf{id} 	& \textbf{date}  	& \textbf{toj} 		& \textbf{presence}\\
87365		&  2011--4--4 13:53:59 	& JabInfo@jabbim.cz	& Available\\
87369		&  2011--4--4 15:43:07 	& JabInfo@jabbim.cz	& Away\\
\ldots		& \ldots               	& \ldots		& \ldots\\ \hline
\end{tabular}
\caption{Ukázka tabulky \textit{presence}.}
\label{tabPresence}
\end{center} 
\end{table}
Tabulka \ref{tabPresenceModify} se od pùvodní li¹í pøidáním sloupce \textit{dateEnd} (podbarven ¹edì), který s atributem \textit{dateStart} vymezuje interval, kdy daná hodnota byla nebo je platná. Tato entita je pouze pøíkladem jak by mohla daná transformace vypadat. V této práci se ¾ádná nová tabulka nevytváøela a ani se nemodifikovala ji¾ vytvoøená. Celá transformace je popsána v dal¹í èásti této podkapitoly.
\begin{table}[ht]
\begin{center}
\begin{tabular}{ c  c  >{\columncolor[gray]{.9}}c  c  c c} 
\rowcolor[gray]{0.9}
\textbf{id} 	& \textbf{dateStart}  	& \textbf{dateEnd}	& \textbf{toj} 		& \textbf{presence}\\
87365		&  2011--4--4 13:53:59 	&  2011--4--4 15:43:07	& JabInfo@jabbim.cz	& Available\\
87369		&  2011--4--4 15:43:07 	&  INF			& JabInfo@jabbim.cz	& Away\\
\ldots		&\ldots           	& \ldots          	&\ldots			& \ldots\\ \hline
\end{tabular}
\caption{Ukázka modifikované tabulky \textit{presence\_modify}.}
\label{tabPresenceModify}
\end{center} 
\end{table}

Postup jednotlivých krokù pøi transformaci èasových údajù z tabulky \textit{presence}, je zobrazen v následujícím výètu. Tento zjednodu¹ený popis algoritmu vy¾aduje dva vstupní parametry. První je JabberID u¾ivatele, jeho¾ polo¾ky v databázi mají být transformovány. Druhá nutná polo¾ka je datum, které bude slou¾it jako upøesòující vstupní interval.

Data z tabulky presence jsou transformována na vektor $\vartheta$ o 288 dimenzích, kde z pohledu èasového je jedna dimenze období vymezené 5 minutami. Den je rozdìlen na úseky po 5 minutách ($\delta=300s$), kterých je 288. Tedy $$\vartheta = (\vartheta_1, \vartheta_0, \ldots, \vartheta_N),$$ kde $N = 288$.
\begin{enumerate}[leftmargin=\parindent]
  \item Vstupním parametrem je datum, které vymezuje data pro transformaci. Toto datum je pøevedeno na dvì data (poèátek a konec dne), která tvoøí hranièní body v intervalu $\iota$. 
  \item Výbìr dat z databáze, která splòují èasové období definované intervalem $\iota$ a u¾ivatel $ID$. Ulo¾ení tìchto dat do mno¾iny $\Gamma$.
  \item Pokud zadanému dotazu neodpovídá ¾ádný øádek z tabulky, jsou data oznaèena jako prázdná. Výstupní transformovaný vektor $\vartheta$ je naplnìn hodnotami reprezentujícími stav \textit{Unavailable}. Algoritmus je \textbf{ukonèen}.
  \item Zji¹tìní prvního statusu toho dne.
  \begin{enumerate}[label=\arabic{enumi}.\arabic*, leftmargin=*, start=1]
    \item Pøevod data o den døívìj¹ího na interval $\iota_1$, napøíklad \textit{\textless2011--08--22 00:00:00, 2011--08--22 23:59:59\textgreater}.
    \item Výbìr dat vyhovujícímu intervalu $\iota_1$ a u¾ivateli $ID$ z databáze.
    \item Výbìr posledního záznamu z mno¾iny dat získaných z pøede¹lého dotazu.
    \item Nalezení poslední presence a ulo¾ení její hodnoty do $\lambda$.
  \end{enumerate}
  \item Výbìr následujícího záznamu z mno¾iny $\Gamma$.
  \item Výpoèet zda je èasový interval mezi vybraným a následujícím záznamem vìt¹í jak $\delta$.
  \begin{enumerate}[label=\arabic{enumi}.\alph*, leftmargin=*, start=1]
     \item Èasový interval je vìt¹í ne¾ interval $\delta$.
  \begin{enumerate}[label=\arabic{enumi}.\arabic*, leftmargin=*, start=1]
    \item Do výsledného vektoru $\vartheta$ je ukládána hodnota presence daného záznamu.
    \item Opakuj pøede¹lý bod \textbf{6.1} kolikrát je interval $\delta$ men¹í ne¾ rozdíl mezi èasy vybraného a následujícího záznamu.
  \end{enumerate}
  \end{enumerate}
  \begin{enumerate}[label=\arabic{enumi}.\alph*, leftmargin=*, resume]
          \item Èasový interval je men¹í ne¾ interval $\delta$.
  \begin{enumerate}[label=\arabic{enumi}.\arabic*, leftmargin=*, start=1]
    \item Jsou vybírány dal¹í záznamy z mno¾iny $\Gamma$ dokud rozdíl mezi èasy v sekundách není vìt¹í ne¾ interval $\delta$.
    \item Jednotlivé presence záznamù jsou ukládány do pomocného pole, transformované do kvantitativních hodnot, jak je uvedeno v úvodu této podkapitoly.
    \item Ka¾dý prvek pole je vynásoben poètem sekund, zastoupených v daném intervalu.
    \item Výbìr nejvìt¹ího prvku z pomocného pole a ulo¾ení jej do výsledného vektoru $\vartheta$.
  \end{enumerate}
    \end{enumerate}
  \item Celý proces je opakován od bodu \textbf{5}, dokud mno¾ina $\Gamma$ není prázdná.
\end{enumerate}


\section{Metody dolovaní dat}\label{MetodyDolovaniDat}
Základ metod dolování dat je zalo¾en na statistice, posledních poznatcích z umìlé inteligence èi strojového uèení. Hlavní cíl tìchto netriviálních metod je spoleèný --- snaha zji¹tìné výsledky prezentovat srozumitelnou formou. Pro vìt¹inu pou¾ívaných metod je spoleèná vlastnost pøedpoklad, ¾e objekty popsané pomocí podobných charakteristik patøí do stejné skupiny (uèení na základì podobnosti similarity--based learning). Objekty obsahující atributy, lze pøevést na body v \textit{n}--rozmìrném prostoru, kde \textit{n} reprezentuje poèet atributù. Vychází se z pøedstavy podobnosti bodù tvoøící urèité shluky v prostoru.

Dal¹í rozdíly mezi metodami, které byly prezentovány v \cite{Berka}, spoèívají v:
\begin{itemize}
   \item schopnosti reprezentace shlukù (napø. otázka lineární separability)
   \item srozumitelnosti nalezených znalostí pro u¾ivatele (symbolické vs. subsymbolické metody)
   \item efektivnosti znovupou¾ití nalezených znalostí
   \item vhodnosti typù dat
   \item a dal¹í\ldots
\end{itemize}

Problémy, které data mining øe¹í, se rozdìlují do nìkolika skupin. Do výètu vybraných z nich, které budou následnì rozebrány, patøí \textit{asociaèní pravidla}, \textit{klasifikace}, \textit{modely}, \textit{predikce} a \textit{shlukování}.

%\subsection*{Asociaèní pravidla}
Pøi popisu asociaèních pravidel, která jsou zalo¾ena na syntaxi \textit{IF--THEN}, bylo èerpáno z \cite{Berka}. Jejich roz¹íøení se datuje do 90. let 20. století, kdy byly panem Agrawalem pøedstaveny v souvislosti s analýzou \uv{nákupního ko¹íku}.
Pou¾itelnost bude vysvìtlena právì na pøíkladu analýzy nákupního ko¹íku. Podstata pøíkladu je tvoøena zákazníkem a jeho systémem nakupování. Jsou zji¹»ovány produkty, které jsou nakupovány souèasnì. Hledají se neboli jsou vytváøeny spoleèné vazby (asociaèní pravidla) mezi výrobky a urèuje se jejich spolehlivost. Na základì tìchto závislostí je upravováno umístìní jednotlivých výrobkù. Obecnì jsou tedy asociaèní pravidla pova¾ována za konstrukci, která z hodnot jedné transakce odvozuje mo¾nost výskytu závislostí v jiných transakcích. Jsou tedy hledány v¹echny vnitøní závislosti existující mezi daty.

%\subsection*{Klasifikace}
K dal¹ím metodám pro data minig patøí klasifikace, která bude opìt vysvìtlena na pøíkladu, pøevzatého z \cite{IIS}. Podle obsahu databáze nebo dotazníku bude ka¾dý klient banky zaøazen do rùzných krizových skupin. Na základì tìchto skupin pracuje \uv{credit skóring}, je¾ klientovi poskytne nebo odepøe napøíklad úvìr v bance. Dal¹í pøíklady vyu¾ití jsou napøíklad ve zdravotnictví. Na základì zdravotního stavu pacienta a jeho pøíznakù, je pacient zaøazen do tøíd, které reprezentují jednotlivé nemoci. Klasifikací jsou, podle \cite{Han}, jednotlivé zkoumané elementy rozdìleny (podle hodnot atributù) do vhodných kategorií, které jsou pøedem vytvoøeny z navzájem podobných objektù (tvorba profilù tøídy). Pøi této metodì je upøednostòována pøesnost pøed jednoduchostí a rychlostí. Zdroje klasifikovaných objektù jsou vìt¹inou tvoøeny jednotlivými øádky v databázi. Vzory dat vytváøí instance, jejich¾ vlastnosti reprezentují atributy vyjádøené èíselnou hodnotou.

%\subsubsection*{Modely}
Na modelech je zalo¾en tøetí typ metod pro dolování dat. Základem modelù jsou trénovací data. Dále uvedené pøíklady vybraných klasifikaèních modelù, byly èerpány z \cite{Han}. Pøedev¹ím jsou to rozhodovací stromy, neuronové sítì, statistické metody, klasifikaèní pravidla a dal¹í.

%\subsection*{Predikce}
Metoda, která je postavena na my¹lence, kde chronologicky seøazená data a vývoj jejich hodnot v minulosti tvoøí základ pro urèení hodnot budoucích, se nazývá predikce. Je øazena mezi velmi známé procesy, které na základì získaných znalostí pøedpovídají následující vývoj. Pøedpokládá se, ¾e na základì informací získaných z dat v minulosti, bude mo¾né postavit modely, které se budou chovat stejnì nebo alespoò podobnì i v budoucnu. Vyu¾ití naleznou v pøedpovìdi poèasí (z namìøených meteorologických hodnot se urèují budoucí pøedpokládané teploty), pøi vývoji cen na burze a dal¹ích. Podklady pro popis predikce byly èerpány z \cite{Berka,Han}.

%\subsection*{Shlukování}
Poslední zde uvedená metoda je zamìøená na dìlení objektù do pøedem neznámých skupin. Proces dìlení probíhá na základì specifikace objektù a jejich odli¹nosti od ostatních shlukù. Tato èást, pro kterou bylo èerpáno z \cite{Rezankova,Bramer}, bude podrobnì rozebrána v následující podkapitole.

\section{Shlukování}\label{KapShluk}
V této podkapitole je shlukování rozdìleno na nìkolik metod shlukové analýzy podle \cite{Han}. U ka¾dé z nich jsou popsány její základní vlastnosti a uvedeny algoritmy relevantní k práci. Poslední metoda \textit{metoda rozkladu} je rozebrána podrobnìji z dùvodu jejího praktického vyu¾ití v této práci.

Shlukování je zamìøeno na dìlení objektù do pøedem neznámých skupin. Proces dìlení probíhá na základì specifikace objektù a jejich odli¹nosti od ostatních shlukù.

Vìt¹ina ní¾e popsaných metod a algoritmù je zalo¾ena na výpoètu vzdáleností mezi objekty. Tato vzdálenost lze vyjádøit rùznými mírami, podle knihy \cite{Berka} napøíklad pomocí \textit{Hammingovy vzdálenosti} (dH), \textit{Euklidovské vzdálenosti} (dE) a \textit{Èeby¹evovy vzdálenosti} (dC). Rozdíl mezi tìmito typy urèující vzdálenosti, graficky vyjadøuje obrázek \ref{picStat}. Kde $X1$ je støed, od nìho¾ jsou jednotlivými obrazci znázornìny dané vzdálenosti. Konkrétnì pomyslné body umístìné po obvodu kruhu jsou v¹echny stejnì vzdáleny od støedu $X1$. Tato vzdálenost je oznaèena jako Euklidovská. Dal¹í 2D tìleso ètverec, který je vodorovný s osami $A1$ a $A2$ prezentuje Èeby¹evovu vzdálenost. Po obvodu posledního obrazce, ètverce otoèeného o 45° podle osy A1, jsou v¹echny pomyslné body stejnì vzdáleny od bodu $X1$ Hammingovou vzdáleností.

\begin{figure}[ht]
\begin{center}
\input{statistika}
\caption{Srovnání výpoètu vzdáleností od bodu $x_{1}$ \cite{Berka}.}
 \label{picStat}
\end{center}
\end{figure}

%\subsection*{Metody zalo¾ené na modelu}i
Jako první jsou zde rozebrány \textit{metody zalo¾ené na modelu}, které se pokou¹í pøiøadit data k urèitému matematickému modelu na základì spoleèných optimalizovaných vlastností. Vìt¹ina procesù je zalo¾ena na pøedpokladu, ¾e jsou data generována pomocí standardních statistik. Mezi zástupné metody této shlukovací analýzy se øadí Expectation--Maximization (EM) a Self Organizing Oscillator Network, dále jen SOON. Algoritmus SOON je zalo¾en na neuronové síti. Je to metoda vycházející z algoritmu SOM\footnote{Self--Organizing Map} \cite{Rezankova}. Metoda EM je roz¹íøením algoritmu \textit{k--means}, který bude podrobnì rozebrán v následující èásti.% \ref{kMeans}.

%\subsection*{Metody hierarchické}
Hlavní princip \textit{metody hierarchického shlukování} je zalo¾en na tvorbì stromové hierarchie shlukù, která je známá pod názvem \textit{dendrogram}. Hierarchické metody, podle \cite{Han}, mohou být rozdìleny do dvou skupin a to na základì principu, kterým  jsou dendrogramy vytváøeny. První mo¾nost je \textit{aglomerativní pøístup}, který shlukuje men¹í shluky, kdy výsledkem je jen jeden. Druhý pøístup, \textit{divizní}, je zalo¾en na opaèném pøedpokladu. Na poèátku je tedy jeden velký shluk, který je postupnì rozdìlován, dokud není poèet shlukù roven poètu objektù \cite{Rezankova}. Mezi zástupce této metody napøíklad patøí algoritmus AGNES\footnote{AGglomerative Nesting}.

%\subsection*{Metody zalo¾ené na møí¾ce}
K dal¹ím metodám patøí \textit{metody zalo¾ené na møí¾ce}, které kvantují datový prostor do koneèného poètu pravoúhlých bunìk. Tyto buòky jsou uspoøádány do víceúrovòové møí¾kové struktury. Zmínìná struktura tvoøí základ pro shlukové operace. Hlavní výhoda tohoto pøístupu je rychlost zpracování, které vìt¹inou nebere ohled na poèet datových objektù. Èas zpracování závisí pouze na poètu bunìk v ka¾dé dimenzi kvantovaného prostoru. Mezi zástupce metod zalo¾ených na møí¾ce patøí metoda STING --- STatistical INformation Grid, který pracuje se statickými informacemi ulo¾enými v buòkách møí¾ky. Algoritmus je rozdìlen do dvou èástí. První si klade za cíl rekurzivnì rozdìlit datový prostor na pravoúhlé buòky. Druhá fáze testuje spojitost mezi sousedy relevantních bunìk \cite{Rezankova}. Mezi dal¹í metody zalo¾ené na møí¾ce patøí 
%CLIQUE\footnote{CLustering In QUEst} a 
WaveCluster\footnote{Clustering Using Wavelet Transformation}, vyu¾ívající vlnkové transformace k rozdìlení prostoru dat. Tato transformace zdùrazòuje shluky v prostoru a objekty jim vzdálené potlaèuje \cite{Han}.

%\subsection*{Metody zalo¾ené na hustotì}
\textit{Metody zalo¾ené na hustotì} vychází z \textit{m}--rozmìrného prostoru, ve kterém jsou zobrazeny objekty ve formì bodù. Místa v prostoru s vìt¹í koncentrací objektù ve srovnání s ostatními oblastmi jsou nazývány shluky. Výchozí pøedpoklad je existence okolí jednotlivých bodù (sousedství). Jedna z charakteristik metod zalo¾ených na hustotì je schopnost vypoøádat se s vzdálenými hodnotami, oznaèovanými jako ¹um \cite{Rezankova}. Jako pøíklad je uvedena metoda DBSCAN\footnote{Density--Based Spatial Clustering of Applications with Noise}, která je zalo¾ena na hustotì objektù v prostoru. U jednotlivých objektù je zkoumáno jejich okolí. Algoritmus je ovlivòován dvìma parametry, velikosti shluku $\varepsilon$ a minimálním poètem objektù v daném shluku $MinPts$, které spolu úzce souvisí (viz \cite{Han}). Bod splòující obì podmínky je oznaèen za jádro. Za pomocí jader je roz¹iøována mno¾ina objektù spojených na základì hustoty. Obsahuje--li jádro $x_{1}$ ve svém okolí dal¹í jádro $x_{2}$ znamená to, ¾e jádro $x_{1}$ je pøímo dosa¾itelné z jádra $x_{2}$. Tímto zpùsobem jsou vytváøeny výsledné \textit{shluky}. V opaèném pøípadì, body, které nesplòují dvì zmínìné podmínky, jsou oznaèeny jako \textit{¹um}.

V¹echny zde doposud zmiòované metody poskytují dobré výsledky pouze s malým poètem dimenzí, tak jak je to popsáno v \cite{IIS}. S narùstajícím poètem atributù roste poèet nerelevantních dimenzí urèených pro shlukování. S tímto také pøibývá zvìt¹ená produkce za¹umìní a znesnadnìní nalezení relevantních shlukù. Data jsou roztrou¹ena do mnoha dimenzí a tím odpadá mo¾nost pou¾ití vzdálenostních funkcí. Zmínìné problémy shlukování velkých dat øe¹í dvì techniky \textit{metoda transformace rysù} a \textit{metoda výbìru atributù}. Pro efektivní shlukování je mo¾né pou¾ít napøíklad algoritmus CLIQUE\footnote{CLustering In QUEst}.

\subsection*{Metody rozkladu}\label{MetodyRozkladu}
Metody rozkladu rozdìlují datové prvky do nìkolika podmno¾in, nazývané shluky. Poèet shlukù musí být znám pøed zahájením samotného procesu. Pøiøazení do konkrétních tøíd je, podle \cite{Rezankova}, jednoznaèné nebo probíhá na základì míry pøíslu¹nosti objektù do shlukù. Pro velký poèet objektù, se kterými se pracuje, jsou vyu¾ívány rùzné iteraèní optimalizace.

Hlavním zástupcem u uvedených metod je algoritmus \textit{k}--means, který je popsán ní¾e. Tvoøí základ pro vìt¹inu metod shlukování nejen pro metody rozkladu. K dal¹ím metodám se øadí \textit{k}--medoidù, \textit{k}--modù, \textit{k}--histogramù, fuzzy shluková analýza a dal¹í.

\subsubsection*{\textit{k}--means}\label{kMeans}
Shlukování pomocí algoritmu \textit{k}--means je pou¾íváno pro data obsahující kvantitativní promìnné a pro data, která nejsou pøíli¹ za¹umìlá. Základní proces je tvoøen iterativním rozdìlováním objektù do tøíd na základì vzdáleností od jejich støedù. Støed neboli centroid shluku je vektor, jeho¾ vzdálenost od souètu vzdáleností objektù v této tøídì je minimální. Celý tento proces je prezentován na obrázku \ref{automat} pomocí jednoduchého schématu koneèného automatu. Jednotlivé kroky koneèného automatu odpovídají krokùm \textit{k}--means zobrazeného pomocí algoritmu \ref{algoritmus}.
\begin{figure}[h]
 \begin{center}
   \begin{tikzpicture}[->,>=stealth',shorten >=1pt,%
		      auto,node distance=2cm,on grid,semithick,
		      inner sep=2pt,bend angle=45]
    \node at ( 0,0) [initial,state, label=above:] (A){};
    \node at ( 3,0) [state, label=above:](B)  {};
    \node at ( 6,0) [state, label=above:](C)  {};
    \node at ( 9,0) [state, accepting, label=above:](D)  {};
    
   
    \path [every node/.style={font=\footnotesize}]
      (A) edge node {$2.krok$} (B)
      (B) edge node {$3.krok$} (C)
      (C) edge [bend right] node {$4.krok$} (B)
      (C) edge node {$4.krok$} (D);
\end{tikzpicture}
  \caption{Algoritmus \textit{k}--means zobrazený pomocí koneèného automatu.}
  \label{automat}
 \end{center}
\end{figure}
Pro výpoèet vzdáleností mezi objekty samotnými nebo mezi objekty a støedem je pou¾ita euklidovská vzdálenost\footnote{mean = støed, centroid je vektor prùmìrù}, která je vyobrazena na obrázku \ref{picStat}. 

K hlavním výhodám algoritmu \textit{k}--means patøí jeho relativní efektivnost. Slo¾itost algoritmu je $O(TKN)$, kde $N$ je poèet objektù, $K$ je poèet shlukù a $T$ je poèet iterací. Obvykle platí, ¾e poèet objektù je mnohem vìt¹í ne¾ poèet iterací i shlukù. Na druhou stranu má i øadu nevýhod, kvùli kterým je èasto rùznými zpùsoby modifikován (\textit{k}--medoids, \textit{k}--medians). K hlavním \uv{nedostatkùm} patøí pøedem nutná znalost poètu shlukù (tøíd) $K$, do kterých budou objekty zaøazeny. Druhý èasto se vyskytující problém je samotné ukonèení algoritmu, které nastane u nalezení lokálního optima namísto optima globálního. Tato nepøesnost vzniká nevhodnì zvoleným rozmístìním poèáteèních støedù. Pùvodní nemodifikovaná verze algoritmu nedefinuje, jak se má postupovat, jsou--li nalezeny prázdné shluky.

\textit{K}--menas je algoritmus, kterým jsou pøiøazovány objekty (vektory) $x_n$, kde $n=1,..,N$, do $S_k$, kde $k=1,...K$, shlukù. V prvním kroku jsou urèeny poèáteèní støedy tøíd, do kterých se budou objekty shlukovat. Urèení poèáteèních centroidù $c_k$ probíhá napøíklad náhodným výbìrem \textit{K} objektù nebo \textit{K} prvních objektù souboru. Druhým krokem jsou zkoumány jednotlivé vzdálenosti objektù $x_n$ od poèáteèních støedù $c_j$ pomocí euklidovské vzdálenosti. Na základì nejmen¹í zji¹tìné vzdálenosti mezi objektem a centroidem je objekt zaøazen do shluku, kterému nále¾í právì tento støed. Ve tøetím kroku, tak jako u kroku prvního, jsou hledány nové støedy shlukù. Nyní ji¾ v¹ak nejsou zvoleny náhodnì, ale spoèítány. Jsou vypoèítány na základì prùmìrných jednotlivých hodnot objektù a ulo¾en jako \textit{m}--rozmìrný vektor. Ètvrtým krokem se algoritmus dostává do koneèné fáze, kdy mohou nastat dva mo¾né pøípady. Novì nalezené støedy nejsou pøíli¹ vzdáleny od pøedchozích centroidù a proto je algoritmus ukonèen. Druhá èastìji se vyskytující mo¾nost iterativnì provádí algoritmus od druhého kroku, dokud neplatí první mo¾nost nebo dokud se objekty nepøestanou pøemís»ovat úplnì. Pøi popisu tohoto algoritmu bylo èerpáno z \cite{Rezankova, Berka}. Ní¾e zobrazený algoritmus \ref{algoritmus} prezentuje krok po kroku metodu \textit{k}--means.

\def\lstlistingname{Algoritmus}
\begin{figure}[h]
\lstset{language=Algoritmus ,caption={Metoda \textit{k}--means byla pøevzata z \cite{Berka}.},label=algoritmus}
\begin{lstlisting}
1. náhodnì zvol rozklad do $K$ shlukù
2. urèi centroidy pro v¹echny shluky v aktuálním rozkladu
3. pro ka¾dý pøíklad $x$
   3.1 urèi vzdálenosti $d(x,c_k)$, $k = 1,...,K$, kde $c_k$ je centorid k-tého shluku
   3.2 nech» $d($x$,c_l)$ = min_k $d(x,c_k)$
   3.3 není-li $x$ souèástí shluku $l$ (k jeho¾ centoridu $c_l$ má nejblí¾e), pøesuò $x$ do shluku $l$
4. do¹lo-li k nìjakému pøesunu, potom jdi na $2$, jinak konec
\end{lstlisting}
\end{figure}

Díky jednoduchosti a relativní rychlosti je metoda \textit{k--means} stále výraznì vyu¾ívána. Uplatnìní nachází v ¹iroké ¹kále oblastí jako je napøíklad biologie nebo poèítaèová grafika. Vzhledem k enormnímu poètu mo¾ného uspoøádaní nejsou výsledky v¾dy pøesné, ale èasto pouze pøibli¾né.


\section{Programy}
V souèasné dobì na programovém trhu existuje mnoho systému, které jsou zamìøeny na data mining. Mezi nejroz¹íøenìj¹í a nejdostupnìj¹í nástroje patøí Weka a RapidMiner. K tìmto nástrojùm je také mo¾né zaøadit program FIT--miner vyvíjený na fakultì informaèních technologií v Brnì. V této práci byl pro samotný data miningg vyu¾it program RapidMiner, který dostal pøednost pøed ostatními. Z pohledu nástroje FIT--miner, který ve své základní èásti podporuje z databází pouze Oracle, se RapidMiner jevil jako vhodnìj¹í. Kompatibilitu pro databáze typu PostgreSQL ji¾ mìl zabudovanou a tak nebylo potøeba vyvíjet ¾ádné doplòující moduly, jak by to bylo u FIT--mineru. V pøípadì nástroje Weka, RapidMiner pùsobil propracovanìj¹ím dojmem a také nabízí lep¹í grafické zobrazení vyhodnocených výsledkù.

Dal¹ím velmi roz¹íøeným a èasto pou¾ívaným nástrojem je jazyk \textit{R}. R vychází z jazyka \textit{S}, který ale není jako jazyk R volnì ¹iøitelný. Statistický a grafický nástroj R je tedy volnì dostupným jazykem a prostøedím, které je ovládáno pouze z pøíkazové øádky. Pro jednodu¹¹í práci jej lze roz¹íøit o grafické rozhraní jako je RKWard nebo R Commander. Samotnou aplikaci lze roz¹íøit o mnoho statistických doplòkù, které jsou takté¾ zdarma.

Mnoho programù pro dolování dat je zalo¾ena na pøístupu vizuálního programování. Jedná se o proces, pøi kterém je u¾ivatelem, za pomoci grafických prostøedkù, navr¾en algoritmus a dal¹í postup práce. Jako pøíklad lze uvést poloprofesionální aplikaci \textit{Orange}, u které jsou nejdùle¾itìj¹í èásti psány pomocí C++ a roz¹íøení lze implementovat v jazyce Python.

Na vybraných technicky zamìøených vysokých ¹kolách existují skupiny, které se zabývají výzkumem a vývojem nástrojù pro data mining. Jako pøíklad lze uvést ji¾ døíve zmiòovaný FIT--miner z fakulty informaèních technologií v Brnì nebo také projekt LISp--Miner z Vysoké ¹koly ekonomické v Praze. LISp--Miner je otevøený akademický systém urèený pro výuku a výzkum metod pro dobývání znalostí z databází.


\subsection*{RapidMiner}
RapidMiner je, tak jak je popsán na oficiálních stránkách produktu \cite{RapidMiner}, celosvìtovì nejpou¾ívanìj¹í open--source systém pro dolování dat. Je mo¾né jej pou¾ívat jako samotnou aplikaci nebo jej zaèlenit jako komponentu do vlastních výrobkù v podobì knihovny pro jazyk Java. Pro zájemce je nabízen také ve verzích  pro firmy, které jsou rozdílné v poplatcích, podpoøe pro zákazníka, záruce a dal¹ích balíèkù slu¾eb zaji¹»ující celkovou komplexnost a spolehlivost produktu.

Jak ji¾ vìt¹ina podobných aplikací, je v souèasné dobì implementován v jazyce Java, díky které nabízí flexibilní nejen grafické prostøedí. K vybraným základním rysùm toho nástroje, tak jak jsou prezentovány firmou \textit{Rapid--i}, patøí: výkonné, pøesto intuitivní grafické u¾ivatelské rozhraní pro návrh procesù, jednoduché øe¹ení pro transformaci dat, kontrola výsledkù ji¾ pøi samotném návrhu a dal¹í. Nástroj RapidMiner podporuje ¹irokou ¹kálu metod a algoritmù pro data minig. Mnoho algoritmù je implementováno pøímo v aplikaci, ale také je pou¾ito metod z konkurenèního softwaru Weka. V základní verzi urèené pro veøejnost je k nalezení pøes 100 procesù k modelování. Jsou zde zastoupeny jak metody klasifikaèní a asociaèní, tak i metody shlukovací, z nich¾ lze jmenovat napøíklad DBSCAN, \textit{k}--medoids a hlavnì \textit{k}--means. 

K dal¹ím schopnostem RapidMineru je mo¾nost spu¹tìní jeho samotného pomocí grafického rozhraní nebo z pøíkazové øádky. Jak ji¾ bylo uvedeno døíve, je také mo¾né jej pou¾ít jako knihovnu v jazyce Java. V této práci jsou pou¾ity první dvì mo¾nosti. Pomocí grafického prostøedí byl vytvoøen experiment, otestována jeho funkènost a následnì pro jednotlivá shlukování pou¾ita ¹ablona procesu, která byla volána z pøíkazové øádky. Tato mo¾nost je k dispozici díky tomu, ¾e jsou projekty v programu RapidMiner ukládány do èitelné a strukturované formy za pomocí znaèkovacího jazyka xml.

\chapter{Implementace}
Obsahem ètvrté kapitoly je popis praktické èásti této práce. Jsou zde charakterizovány jednotlivé prvky, které byly pou¾ity jak pro získání dat, tak pro jejich následné ulo¾ení. V první èásti je prezentována struktura architektury této práce. Její grafické znázornìní je ukázáno na obrázku \ref{picArchitektura}.

Cílem této práce je dolování dat z Jabberu. Jak ji¾ bylo døíve napsáno, Jabber je real--time sí»ová slu¾ba díky ní¾ mohou její u¾ivatelé komunikovat, informovat nebo sdílet svùj status s jinými u¾ivateli. Celá tato vzájemná komunikace skrývá rozsáhlé mno¾ství informací o klientech dané sítì. V¹echna tato navzájem vymìnìná nebo poskytnutá data následnì poslou¾í jako zdroj samotnému dolování. Pro jejich uskladnìní je vyu¾ita databáze, jejich¾ strukturální návrh prezentuje obrázek \ref{picDatabase}. 

Tøetí èást této kapitoly je zamìøena na Jabber klienta neboli robota, který je implementován v jazyce C++ pouze s konzolovým rozhraním. Robot v této práci hraje roli pasivního u¾ivatele, který informace pouze pøijímá. Ve vybraných pøípadech doká¾e u¾ivatele ze svého seznamu kontaktù vyzvat k zaslání odpovìdi s informacemi na odpovìï, o kterou ¾ádal. Struktura samotného robota je popsána ní¾e a reprezentována obrázkem \ref{picRobot}. V èásti o Jabber robotovi jsou také uvedeny informace o knihovnì \textit{gloox}, kterou je zprostøedkovány v¹echny nále¾itosti Jabber komunikace.

\section{Architektura}
Ji¾ ze samotného zadání a názvu této práce je zøejmé, ¾e je tøeba celý proces rozèlenit na men¹í elementy. Vhodnou dekompozicí vzniklo pìt jednotlivých ucelených prvkù, které
jsou prezentovány schématem na obrázku \ref{picArchitektura}. Konkrétnì to jsou, zleva: \textit{XMPP server}, \textit{robot}, \textit{databáze}, \textit{data mining} a \textit{u¾ivatelské rozhraní}. Vzájemná výmìna informací mezi jednotlivými èástmi je zobrazena pomocí ¹ipek, které urèují smìr komunikace.


První èást schématu, která je nazvaná XMPP sí» a je na obrázku \ref{picArchitektura}, je obecnì popsána v druhé kapitole. Vztah a vzájemná komunikace s robotem probíhá pomocí internetové sítì, kdy XMPP sí» souhrnnì reprezentuje jednotlivé prvky, jako jsou Jabber servery, u¾ivatele a jejich klienty. Jak je patrné, výmìna informací mezi tìmito èástmi  probíhá obousmìrnì. Druhý element schématu, \textit{robot}, je charakterizován v podkapitole ní¾e, kde je podrobnì popsán návrh jeho struktury a vyzdvi¾eny jeho základní vlastnosti a schopnosti. Dal¹ím blokem je \textit{databáze}, která reprezentuje datové úlo¾i¹tì. Do nìho¾ jsou za pomocí jednosmìrného kanálu ukládána data, která jsou získávána z toku informací proudícími mezi robotem a XMPP sítí. Pøehled vybraných jednotlivých tabulek a jejich atributù je mo¾né nalézt v následující kapitole, která se zabývá návrhem databáze.

Dal¹ím oddílem, prezentovaným na obrázku \ref{picArchitektura} pod názvem \textit{data mining skript}, je skript, který provádí samotný data minig. Jako první jsou vybraná data z databáze transformována do vhodného formátu pro dolováni z dat. Tato èást je podrobnì popsána ve tøetí kapitole, v oddílu zabývajícím se transformací dat. Pøeformátovaná data jsou pøedána programu RapidMineru, kterým za pomocí algoritmu \textit{k}--means je provádìn data mining.

\begin{figure}[ht]
\begin{center}
\includegraphics[scale=.5]{drawing.png}
\caption{Struktura architektury bakaláøské práce.}
 \label{picArchitektura}
\end{center}
\end{figure}

Poslední èástí je \textit{u¾ivatelské rozhraní}, které je implementováno pomocí webových slu¾eb. Jako pøíklad lze uvést slu¾bu, která zobrazuje status u¾ivatele na webové stránce. U¾ivatel pouze musí vlastnit Jabber úèet a mít pøidaného tohoto robota do seznamu kontaktù. Od ka¾dého u¾ivatele, je¾ má tohoto robota pøidaného do svého seznamù kontaktù, je sbírána ve¹kerá sí»ová aktivita. Mo¾nosti, které mu nabízí u¾ivatelské rozhraní v podobì webové prezentace tudí¾ zále¾í pouze na datech, které sám do sítì rozesílá. Jsou--li podporována v¹echna zde implementována roz¹íøení, která jsou uvedená v kapitole druhé, je mo¾né vyu¾ít jejich slu¾eb prostøednictvím internetových stránek. Jako dal¹í pøíklad lze uvést zobrazení aktuálního umístìní u¾ivatele na mapách od firmy google, dle informací poskytnutých prostøednictvím dokumentu User Geoloc \cite{Xep0080}.

%Architektura této práce je rozdìlena na pìt èástí. celkove bych doplnil pred 4.1. podkapitolu architektura.  Do ktere bych nakreslil obrazek (neco jako priloha). A k tomu bych popsal jak jednotlive casti komunikuji. (ty casti, ktere stoji za rec bych popsal do samostatnych podkapitol)

\section{Databáze}
Data, která jsou sbírána robotem, jsou ukládána do objektovì--relaèní databáze PostgreSQL\footnote{vyvinul se z projektu Ingres}. PostgreSQL neboli také Postgres byl pou¾it ve verzi 8.4.7 a je provozován na operaèním systému Ubuntu.

\subsection*{Návrh databáze}
Struktura databáze, do které je ukládána ve¹kerá komunikace Jabber robota, vyu¾ívá relaèní model. Obrázkem \ref{picDatabase} jsou prezentovány nejdùle¾itìj¹í èásti databáze. Celou strukturu návrhu je mo¾né nalézt v pøíloze \ref{EDatabase}. V jednotlivých èástech návrhu databáze je poèítáno s druhotným vyu¾itím obsahu, které bude popsáno v dal¹ích oddílech této práce.

V dobì návrhu databáze nebylo zcela zøejmé, která data budou následnì analyzována. Z tohoto dùvodu se struktura databáze sna¾í zachytit v¹echna \uv{dùle¾itá} data. Za tímto úèelem je v návrhu databáze obsa¾ena tabulka \textit{xml}, která je nositelem obsahu jak v¹ech pøijatých, tak i odeslaných zpráv. Tabulky \textit{debug}, \textit{level} a \textit{logarea}, které v zú¾eném návrhu databáze, uvedeném na obrázku \ref{picDatabase}, nejsou zobrazeny, jsou urèeny pouze jako doplòkové informace k typu zprávy. Tabulku xml je mo¾né nahradit jednotlivými dal¹ími tabulkami, které jsou zamìøeny na konkrétní data. Pøíkladem entity, která ji¾ obsahuje konkrétní data bez xml prvkù, je tabulka \textit{message}, která je takté¾ vyobrazena v pøíloze \ref{Estanza}. Jejím obsahem jsou zprávy vzniklé pøi Jabber komunikaci mezi u¾ivatelem a robotem, jeho¾ schopnosti budou popsány ní¾e.

Tabulka \textit{presence} z pohledu XMPP standardu prezentuje jeden ze tøí základních èástí stanzy, element \textit{presence}. Základním cílem této tabulky je shroma¾ïování u¾ivatelských statusù. Jak ji¾ bylo zmínìno ve tøetí kapitole, v èásti která se zabývá transformací, atribut presence obsahuje hodnoty typu text. Pøíklad v¹ech mo¾ných hodnot, kterých tento atribut mù¾e nabývat je prezentován v pøíloze \ref{Estanza} v èásti zabývající se elementem presence. K dal¹ím atributùm této tabulky patøí \textit{message}, který je reprezentován textovým øetìzcem a roz¹iøuje informace o stavu u¾ivatele. V této èásti je èasto obsa¾en text, který je do statusu pøidán automaticky IM klientem. Transformovaný obsah této entity tvoøí dùle¾itou èást pøi získávání znalostí a to v podobì dat, ze kterých budou \uv{dolovány} informace.

\begin{figure}[ht]
\begin{center}
\input{DatabaseSmall}
\caption{Vybraná èást struktury databáze.}
 \label{picDatabase}
\end{center}
\end{figure}

Vìt¹ina roz¹íøení standardu XMPP, která jsou popsána ve druhé kapitole, jsou prezentována pomocí pìti tabulek. Konkrétnì to jsou tabulky \textit{geoloc}, \textit{tune}, \textit{mood}, \textit{activity} a \textit{vcard}. Pro obsah a názvy atributù v¹ech pìti tabulek s roz¹íøeními se staly vzory dokumenty jednotlivých XEP, které je definují. Tabulky kromì tìchto atributù obsahují také polo¾ku \textit{jidbare}, která, jak ji¾ název naznaèuje, obsahuje pouze èisté JabberID bez resources. Tato skuteènost vyplývá ji¾ ze samotného návrhu XEP protokolù. V tabulce \textit{vcard} jsou také polo¾ky, jejich¾ obsah je tvoøen fotografiemi. Obrázky jsou zde ulo¾eny ve stavu, tak jak jsou pøená¹eny po síti, tedy pomocí datového formátu Base64. Base64 je algoritmus, který pøevádí binární data na øetìzec, který je tvoøen pouze znaky ASCII tabulky.

S posledním roz¹íøením, nazvaném \textit{Software version} je spjata tabulka resource, její¾  nìkolik sloupcù tvoøí informace o IM klientovi a operaèním systému, na kterém bì¾í. Tyto základní údaje jsou definovány v protokolu \cite{Xep0092}, kde je také mo¾né èerpat bli¾¹í informace. Pokroèilej¹í atributy, jako je \textit{type} a \textit{osversion} nacházejí svùj podklad v XEP dokumentu \cite{Xep0115}, takté¾ jako atribut \textit{ver}. V neposlední øadì se zde nachází zmínka o podpoøe audia a videa, a» u¾ v podobì \textit{jingle} nebo \textit{google}. Pøesto tyto vý¹e uvedené údaje nejsou hlavním dùvodem existence této tabulky. Její primární cíl je uchovávat informace o pøipojených u¾ivatelích a v¹ech jejich resources.

Entita resources tvoøí základ pro tabulku \textit{status}. Její obsah je automaticky generován z obsahu tabulky popsané vý¹e. Poèet øádkù odpovídá poètu u¾ivatelù, kteøí jsou v seznamu kontaktù tohoto robota. Primárním cílem je informování o aktuálním stavu u¾ivatele. Je tedy poskytován stav, ve kterém se u¾ivatel nachází s pøihlédnutím na prioritu a resources. Øádek entity obsahuje status a dostupnost u¾ivatele a jeho resources s nejvìt¹í pøihlá¹enou prioritou.


\section{Robot}
V této èásti bude popsána aplikace, která zaji¹»uje real--time komunikaci s ostatními entitami  Jabber sítì. Konzolový robot, který je vyvíjen pro operaèní systém Linux, také vhodným zpùsobem pracuje s databází, kam jsou ukládána jednotlivá získaná data. Jabber jádro sí»ové komunikace \cite{Rfc3920}, je implementováno pomocí volnì dostupné knihovny \textit{gloox}. V porovnáním s jinými knihovnami disponuje lep¹í podporou a dokumentací. Gloox plnì implementuje standart XMPP Core \cite{Rfc3920} a z vìt¹í èásti i standard XMPP IM \cite{Rfc3921}. Dodateènì je podporováno kolem tøiceti XEP standardù mezi nì¾ napøíklad patøí vcard--temp \cite{Xep0054} a dal¹í. 

Pøi implementaci robota byly vyu¾ity základní prvky objektovì--orientovaného programování. Ka¾dá tøída zde zastupuje jednoznaènì oddìlitelné elementy robota. A» u¾ se jedná o blok komunikující s databází, rùzná roz¹íøení nebo o jádro robota. V¹echny zde jmenované objekty hrají dùle¾itou roli jak v èásti dekompozice na men¹í ucelené celky tak i v celkové komplexnosti programu. Jako pøíklad lze uvést tøídy, které reprezentují jednotlivá pro tuto práci vhodná roz¹íøení, jejich¾ základ je v podobì XEP dokumentù.

\subsection*{Návrh robota}
Struktura návrhu tøíd robota, která je v základní èásti prezentována obrázkem \ref{picRobot}, je velmi podobná struktuøe návrhu databáze, obrázek \ref{picDatabase}. Mnoho atributù z robota a z databáze jsou ve vztahu jedna ku jedné. Samotná komunikace a øízení mezi tìmito entitami je zprostøedkováno pomocí knihovny \textit{libpq}. Libpq je programátorské rozhraní pro databázi PostgreSQL. Je to sada funkcí v jazyce C, které umo¾òují klientským programùm zadávat dotazy na server a následnì na nì obdr¾et odpovìdi. Pomocí této knihovny je øízen pøenos dat mezi robotem, který sbírá data, a databází, kam jsou ukládána. Navázání spojení a následné jednotlivé dotazy probíhají v blokujícím re¾imu. V souboru \textit{connect.h} jsou, v podobì pøeddefinovaných konstant, uvedeny v¹echny údaje nutné k navázání spojení a» u¾ s databází nebo s komunikaèním Jabber serverem. Tudí¾ se stává hlavní èástí urèenou k editaci pøipojení a Jabber úètu na nìm¾ robot bì¾í. K dal¹ímu pouze textovému dokumentu patøí \textit{const.h},  který je zamìøen k definování jednotlivých pøíkazù a dotazù pro databázi. Jsou to pøíkazy pro tvorbu a aktualizaci tabulek, které jsou takté¾ definované jako konstanty. Identifikaèní názvy, pro snadné odli¹ení, jsou psány velkými písmeny a zaèínají textem \textit{DB\_}.

Komunikace s databází se nachází v samostatné tøídì, která zaji¹»uje samotnou provázanost mezi ní a daty. Pomocí funkcí jsou data, získaná z Jabber komunikace, pøená¹ena a ukládána do jednotlivých tabulek databáze. Pøi zahájení èinnosti robota je zaji¹tìno navázání pøipojení k databázi a provedení nutných inicializaèních krokù. Jako je tvorba nových tabulek, pøi prvním zapnutí aplikace, nebo kontrola existence tìchto entit.

\begin{figure}[ht]
\begin{center}
\input{Robotsmall}
\caption{Vybraná èást struktury robota.}
 \label{picRobot}
\end{center}
\end{figure}

Pro roz¹íøení podle dokumentù XEP popsaných v kapitole druhé, v èásti zabývající se implementovanými roz¹íøeními, je základ nadtøída Extension. Tato tøída obsahuje základní funkce a parametry pro v¹echna roz¹íøení. Jako pøíklad lze uvést u¾ivatelské jméno klienta, který dané roz¹íøení \uv{¹íøí} po síti. Tøídy, které z Extension dìdí a jsou prezentovány na návrhu robota uvedeném na obrázku \ref{picRobot}, jsou následující: \textit{Geoloc}, \textit{Tune}, \textit{Mood}, \textit{Activity} a \textit{SwVersion}. Samotnou strukturou tìchto roz¹íøení, jak ji¾ bylo uvedeno vý¹e, jsou pomocí parametrù kopírovány vlastnosti jednotlivých XEP dokumentù. Tedy ke ka¾dému atributu xml zprávy existuje jak promìnná uchovávající její obsah tak i tzv. \uv{get} a \uv{set} metoda. Pomocí dal¹í metody jsou jednotlivé èásti roz¹íøení rozparsovány, ulo¾eny do tøíd a následnì vlo¾eny do databází. Poslední doposud nezmiòované roz¹íøení v podobì \textit{vcard}, je vyu¾ito z knihovny gloox, která jej implementuje.
  
Základní èást, kterou je mo¾né pova¾ovat za jádro aplikace, je tøída \textit{Bot}. Tato tøída je zalo¾ena na ji¾ zmiòované C++ knihovnì gloox. Je implementována za pomocí vybraných tøíd, ze kterých dìdí. Jsou to pøedev¹ím \uv{handler} tøídy, kterými je zaji¹»ován pøístup k jednotlivým zprávám. Nebo--li jejich prostøednictvím je získán pøístup k samotným elementùm stanzy, jako je message, iq, a presence, jejich¾ vlastnosti a vyu¾ití jsou popsány v druhé kapitole. Konkrétní seznam tøíd, ze kterých je dìdìno, zobrazuje návrh robota na obrázku \ref{picRobot}. Jako pøíklad lze uvést tøídu, z prostoru jmen gloox, \textit{VcardHandler}, díky ní¾ je mo¾né získat a zpracovávat vcard u¾ivatelù, kteøí jsou v seznamu kontaktù robota. Samotné pøidávání u¾ivatelù do seznamu kontaktù je provádìno automaticky. Pouze na stranì klienta je nutné po¾ádat robota o autorizaci, která v¹ak probìhne automaticky. Jednotlivé kontakty nejsou ¾ádným zpùsobem tøídìny do skupin, tudí¾ existuje pouze jedna.

%\section{Jiné produkty}
  
\subsection*{Pøíkazy}
K dal¹ím schopnostem robota, tedy kromì sbírání dat a jejich následného ukládání do databáze, patøí reagovat na vybrané zprávy. Tyto zprávy jsou pøijímány pouze od u¾ivatelù, kteøí byli zaèlenìní do seznamu kontaktù tohoto robota. Základní pøíkaz, který nesmí chybìt u ¾ádné aplikace, je získání nápovìdy. V první øadì informuje o verzi robota a jeho základních vlastnostech. Dále je odeslán struèný ale výsti¾ný seznam pøíkazù i s jejich vysvìtlením.

Pøehled základních zpráv a jejich vysvìtlení je prezentováno v tabulce \ref{tabPrikazy}.  
\begin{table}[ht]
\begin{center}
\begin{tabular}{ l  l   } 
\rowcolor[gray]{0.9}
\textbf{pøíkaz} 	& \textbf{vysvìtlení}\\
HELP			&   Pøehled pøíkazù a jejich popis.\\
INFO			&   Popis aplikace.\\
HISTORY		&   Výpis posledních 10 zmìn statusù.\\
TUNE			&   Výpis o pøehrávané hudbì.\\
GEOLOC		&   Výpis o geografické poloze.\\
MOOD			&   Výpis o aktuální náladì.\\
ACTIVITY		&   Výpis o aktuální èinnosti.\\
VCARD			&   Základní obsah VCard\\ \hline
\end{tabular}
\caption{Pøehled pøíkazù pro robota.}
\label{tabPrikazy}
\end{center} 
\end{table}
Kde první sloupec znaèí pøíkaz, který rozli¹uje velká a malá písmena, a druhý jej krátce a výsti¾nì popisuje. V pøípadì, ¾e u¾ivatel nemá ¾ádný údaj v databázi potøebný k vyhodnocení dotazu, je zaslána pouze informativní zpráva, které vzniklý problém vysvìtluje. V této èásti robota je skryt velký potenciál pro dal¹í vývoj. Více informací je uvedeno v následující kapitole, která je celá vìnována mo¾ným roz¹íøením a pokraèováním této práce.

%==pouziti castecneho komentovani podle stylu doxygenu, makefile
%\section{Architektura}
%--robot plus databaze
%--rapidminer--spusteni davkove/vlastni algoritmus v PHP
%--webova implementace prezentuje vysledky


\chapter{Pokraèování práce}

V souèasné dobì, která je velmi uspìchaná a plná moderních technologií, je velmi dùle¾ité být informován. S tímto také souvisí snaha poskytovat informace svému okolí. Díky protokolu XMPP a real--time komunikaèních sítí je uspokojení potøeb, jako je získávání informací a jejich zpìtné poskytování v oblasti elektronické komunikace, snadno øe¹itelné. Existuje rozsáhlé mno¾ství rùzných sociálních sítí a funkcí, které jsou u¾ivatelùm nabízeny. Poskytované slu¾by sociálními sítìmi jsou vyu¾ívané ve znaèném mno¾ství. Slu¾by, jako jsou prezentování vlastního statusu v klientovi prostøednictvím elementu presence, jsou ji¾ pova¾ovány za samozøejmost. Tato funkènost je nabízena u v¹ech tzv \uv{instant messaging} slu¾eb. Jabber jde v této oblasti je¹tì dál a díky protokolùm \textit{User Mood} \cite{Xep0107} a \textit{User Activity} \cite{Xep0108} je mo¾né sdìlit nejen svou náladu ale také informace o aktuálnì provádìné èinnosti. 

Vìt¹ina slu¾eb, které jsou dostupné na internetu a jsou podporované rùznými servery, poskytuje pouze informace o aktuálním stavu klienta. Pomocí vý¹e uvedených standardù by bylo mo¾né k základní webové prezentaci statusu pøipojit i informace roz¹íøené. Také zapojení standardu \textit{Entity Capabilities} \cite{Xep0115}, který je popsán na konci druhé kapitoly, by mohlo pøinést nové pokroèilej¹í, u¾iteèné informace. Konkrétnì to je samotná podpora IM aplikací v oblasti dal¹ích XEP dokumentù. Nezasvìcený u¾ivatel by tímto velice jednoduchým roz¹íøením dokázal zjistit seznam slu¾eb podporovaných jeho IM programem. A» u¾ by ¹lo o seznam funkcí, které jsou pouze pøijímány, nebo výèet roz¹íøení, které doká¾e od ostatních u¾ivatelù také pøijímat. Jako pøíklad lze uvést zji¹tìní schopnosti, a» u¾ pøíjímání nebo odesílání informací o pøehrávané hudbì, popsané dokumentem \textit{User Tune} \cite{Xep0118}.

Dal¹í bod, kterým by se dalo zabývat se také týká webové prezentace. Nyní v¹ak jde ji¾ konkrétnì o robota vytvoøeného k úèelu této práce. Informace potøebné k zobrazení aktuálního stavu klienta na internetové stránce, jsou ulo¾eny v databázi v tabulce status. Tato tabulka je automaticky generována z obsahu jiné entity, která obsahuje údaje o v¹ech pøipojení daného u¾ivatele. V¹e pracuje správnì a¾ do té chvíle, kdy u¾ivatel svou IM aplikaci neukonèí korektnì. Nastává situace, kdy na server není zaslána zpráva, která informuje o zmìnì statusu. Díky tomuto neoèekávanému ukonèení klienta se u¾ivatel stále tváøí, jako by byl pøipojen i kdy¾ ji¾ není, a zdrojová tabulka se v této chvíli stává neaktuální. Navrhované øe¹ení této situace vyu¾ívá roz¹íøení \textit{XMPP ping} \cite{Xep0199}. Díky nìmu¾ by se mìlo dát zjistit, zda je u¾ivatel stále dostupný nebo ji¾ nikoliv.

V oddílu robota by bylo mo¾né zapracovat na èásti, která se zaobírá pøíkazy zaslané ze strany u¾ivatele. S tímto roz¹íøení úzce souvisí rozèlenìní u¾ivatelù do jednotlivých skupin. Ka¾dá takováto èást seznamu kontaktù by vlastnila rùzná práva, která by se stala základem pro poskytování konkrétních slu¾eb. Zaøazení do tìchto skupin by mohlo probíhat pøi ¾ádosti o poèáteèní autorizaci, která by obsahovala zprávu s pøesnì definovaným øetìzcem. Funkce, která je ji¾ uvedena vý¹e a to v podobì roz¹íøení webové prezentace, by také mohla být poskytována prostøednictvím robota. Konkrétnì se jedná o zji¹tìní podporovaných a» ji¾ pøijímaných nebo odesílaných roz¹íøení. U¾ivatel by pouze poslal robotovi striktnì pøeddefinovanou zprávu a jako odpovìï by obdr¾el seznam podporovaných funkcí.

V mìsíci bøezen, tohoto roku, vy¹la nová verze základních dokumentù RFC. V této práci, ji¾ ale z tìchto standardù nejsou zahrnuty ¾ádné zmìny. V dobì vydání se toti¾ práce dostával do koneèné fáze vývoje. Proto zmìny pøinesené novými protokoly by takté¾ mohly být uplatnìny pøi pøípadném pokraèování této práce.

%Také v èásti zabývající se dolováním z dat se jistì nachází mnoho mo¾ností k pokraèování a roz¹iøování její vlastností.

%Jak vyplývá s vý¹e uvedeného odstavce existuje mnoho mo¾ných roz¹íøení, které nabízí tato práce. Jestli¾e by se srovnal pomìr mezi poskytnutými osobními údaji v sociální sítí Facebook a údaji v síti Jabber, první zmiòovaný èasto vyhrává na plné èáøe. Lze si polo¾it otázku zda není mo¾né vyu¾ít informace zveøejnìné v sociálních sítí i do sítì komunikaèní. Jako pøíklad lze uvést obrázek, kterým se lidé prezentují. Na ji¾ zmiòovaném Facebooku má skoro ka¾dý její u¾ivatel zveøejnìnou fotografii, za úèelem lep¹í prezentace své osobnosti. Naproti tomu poèet obrázkù zastoupených, a» u¾ v podobì log nebo ikon v síti Jabber, je miziví. Propojení tìchto informací by mohlo být podmìtem pro tvorbu vlastní prezentaèní stránky, shrnující nejzajímavìj¹í údaje.






%=inovovat pgormam

%= dalsi zjitovane udaje, jako co by to obnasel, rizika
%= 


\chapter{Vyhodnocení výsledkù}

\section{Manuální rozbor dat}
--charakter dat, jaka data jsem nasbiral
--popst jak jsem data prochael rucne, tedy manualni dataming, pocet zazanmu, delka behu programu, velikost datatabze, pocet uzivatelu...


\chapter{Závìr}
zminit tohel http://xmpp.org/xmpp-protocols/rfcs/, ze vysko nove rfc o xmpp core a xmpp im, zminit ze se to vydalo pozde, tudiz nejsou zahrnuty do teto prace, dopsat do rozsireni
%=========================================================================
